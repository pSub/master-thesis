%% Copied from https://github.com/metaborg/metaborg-pcf

module PCF
%% imports Common

exports
    
    
  lexical syntax

    [a-zA-Z][a-zA-Z0-9]* -> ID
    "-"? [0-9]+          -> INT

    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar

    [\ \t\n\r] -> LAYOUT

    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT

    -> EOF

 lexical restrictions

    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]


    EOF           -/- ~[]

    BackSlashChar -/- [\"]

 context-free restrictions


    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]
    
  lexical syntax
	"-"? [0-9]+ -> INT
	"ifz" -> ID {reject}
	"then" -> ID {reject}
	"else" -> ID {reject}
	"fix" -> ID {reject}
	"fun" -> ID {reject}
	"let" -> ID {reject}
	"in" -> ID {reject}
	"int" -> ID {reject}
	
  context-free start-symbols
    Exp

  sorts Exp Param Type

  context-free syntax
    ID                                 -> Exp   {cons("Var")}
    Exp Exp                            -> Exp   {cons("App"), left}
    "fun" Param "(" Exp ")"            -> Exp   {cons("Fun")}
    "fix" Param "(" Exp ")"            -> Exp   {cons("Fix")}
    "let" ID ":" Type "=" Exp "in" Exp -> Exp   {cons("Let")}
    ID ":" Type                        -> Param {cons("Param")}
    INT                                -> Exp   {cons("Num")}
    Exp "+" Exp                        -> Exp   {cons("Add"), left}
    Exp "-" Exp                        -> Exp   {cons("Sub"), left}
    Exp "*" Exp                        -> Exp   {cons("Mul"), left}
    Exp "/" Exp                        -> Exp   {cons("Div"), left}
    "(" Exp ")"                        -> Exp   {bracket}
    "ifz" Exp "then" Exp "else" Exp    -> Exp   {cons("Ifz")}
    "int"                              -> Type  {cons("IntType")}
    Type "->" Type                     -> Type  {cons("FunType"), right}
    "(" Type ")"                       -> Type  {bracket}
  context-free syntax
    CONTENTCOMPLETE -> Param {cons("COMPLETION-Param")}
    CONTENTCOMPLETE -> Exp   {cons("COMPLETION-Exp")}
    CONTENTCOMPLETE -> Type  {cons("COMPLETION-Type")}

  context-free priorities
    Exp Exp -> Exp >
    Exp "*" Exp -> Exp >
    {left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    } >
    "ifz" Exp "then" Exp "else" Exp -> Exp