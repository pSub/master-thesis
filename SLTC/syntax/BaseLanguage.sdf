module BaseLanguage[TypingJudgment] %%FIXME: Does it make sense to instantiate TypingJudgment with some generated SDF file
imports Common

exports
  context-free syntax
    "module" MID                            -> ModuleDec      {cons("ModuleDec")}
    "language" ID							-> Language       {cons("Language")}
    "meta-variables" MetaVariableList 		-> MetaVariables  {cons("MetaVariables")}
    "contexts" Contexts    				    -> Contexts       {cons("Contexts")}
    "judgments" JudgmentList                -> Judgments      {cons("Judgments")}
    "rules" TypingRule*                     -> Rules          {cons("Rules")}
    "conjectures" TypingJudgment*           -> Conjectures    {cons("Conjectures")}
    
    %%TODO: Make 'language' optional in preparation for imports
    ModuleDec Language MetaVariables Contexts Judgments Rules Conjectures? -> Module {cons("Module")}


  lexical syntax
	"\"" ~[\"a-zA-Z]* "\"" -> Separator
	"I" -> Mode
	"O" -> Mode

  context-free syntax
	Name "{" Mode "}" -> Hole {cons("Hole")}
	"all" ID+ -> All {cons("All")}

%% Meta-Variables	
  context-free syntax
  	"{" ID+ "}"-> Scope {cons("Scope")}
	"\"" PrefixChars "\"" -> Prefix {cons("MetaVariablePrefix")}
  	Name Prefix Scope -> MetaVariableDefinition {cons("MetaVariableDefinition")}
  	MetaVariableDefinition* -> MetaVariableList {cons("MetaVariableList")}
  	
%% Contexts
  context-free syntax
	ID ":=" {Hole "x"}+ -> ContextDefinition {cons("ContextDefinition")}
  	ContextDefinition* -> Contexts {cons("Contexts")}
	
%% Judgments
  context-free syntax
	All? Separator? {Hole Separator}+ Separator? "." -> Judgment {cons("Judgment")} %%FIXME: How do I avoid this warning
	Judgment* -> JudgmentList {cons("JudgmentList")}

%% Typing Rules
  lexical syntax
    "===" "="*     -> RuleSep 
    
  lexical restrictions
    RuleSep -/- [\=]

  context-free syntax
    RuleSep Name?                                        -> RuleSepName           {cons("RuleName"), layout("1.first.line == 2.last.line")}
    TypingRulePremises RuleSepName TypingRuleConsequence -> TypingRule            {cons("TypingRule"), layout("1.first.col == 2.first.col && 2.first.col == 3.first.col")}
    RuleSepName TypingRuleConsequence                    -> TypingRule            {cons("TypingRule"), layout("1.first.col == 2.first.col")}
    TypingRulePremiseList                                -> TypingRulePremises    {cons("PremiseList")}
    TypingJudgment                                       -> TypingRuleConsequence 
    TypingJudgment                                       -> TypingRulePremiseList 
    TypingJudgment TypingRulePremiseList                 -> TypingRulePremiseList {cons("PremiseCons"), layout("1.first.col == 2.first.col")}