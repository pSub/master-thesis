module Subtyping

import Typesystem

language specifications/Subtyping-algorithmic/SimplyTypedLambdaCalculus

contexts Context := ID{I} x Type{O}

meta-variables  Term "~" { Type Exp }
                Ctx "$" { Context }
                Id "%" { ID }
                R "$" {TRecordEntries RecordEntries}
                Num "&" { Int }

judgments
Type{I} "<:" Type{I}.

rules

// $C |- ~e1 : ~T11 -> ~T12
// $C |- ~e2 : ~T2
// ~T2 <: ~T11
// ========================= T-app
// $C |- ~e1 ~e2 : ~T12
// 
// /* Definition of the subtyping relation */
// 
// ======== S-refl
// ~S <: ~S
// 
// // =========== S-ref
// // int <: int
// 
// ~T1 <: ~S1
// ~S2 <: ~T2
// ======================== S-arrow
// ~S1 -> ~S2 <: ~T1 -> ~T2
// 
// /* Record Subtyping */
// 
// ============ S-top
// { $R } <: {}
// 
// ~T <: ~S
// { $R } <: { $U }
// =============================== S-depth
// { %l : ~T $R } <: { %l : ~S $U }
// 
// { $R } <: { $S }
// =============================== S-width
// { %l : ~T $R } <: { %l : ~T $S}
// 
// ======================================================== S-perm
// { %l1 : ~T1 %l2 : ~T2 $R } <: { %l2 : ~T2 %l1 : ~T1 $R }
// 
// ======================================== S-perm
// { %m : ~S %l : ~T $R } <: { %l : ~T $R }
// 
// conjectures
// 
// ===
// int <: int
// 
// ===
// {} <: {}
// 
// ===
// { abc : int } <: {}
// 
// ===
// { l : int m : int } <: { l : int}
// 
// ===
// { l : {o : int} } <: { l : {}}
// 
// ===
// { l : int m : int } <: { m : int l : int}
// 
// ===
// { m : int l : int }  <: { l : int}
// 
// ===
// () |- {x=0 y=1} : {x : int y : int}
// 
// ===
// () |- {x=0 y=1}.x : int
// 
// ===
// () |- {y=0 x=1}.x : int
// 
// ===
// () |- \x : {y : int} . x : { y : int } -> { y : int }
// 
// ===
// () |- (\x : {y : int} . x) {y=1} : { y : int }
// 
// ===
// () |- (\x : {x : int} . x) {x=1} : { x : int }
// 
// ===
// () |- (\x : {y : int} . x) {y=1 x=1} : { y : int }
//  
// ===
// (r : {x : int y : int} ; ()) |- r . x : int
// 
// ===
// () |- (\r : {x : int} . (r.x)) : { x : int } -> int
// 
// ===
// () |- (\r : {x : int} . (r.x)) {x=0 y=0} : int
// 
// ===
// () |- (\x : {y:int x:int} . x) {x=1 y=1} : { y:int x:int }
// 
// ===
// () |- (\x : {y:int} . x) {x=1 y=1} : {y:int}
// 
// ===
// () |- (\r : {x : int} . (r.x)) {y=0 x=0} : int
// 
// ===
// () |- (\r : {x : int} . (r.x)) {y=(\x : int. x) x=0} : int
// 
// ===
// () |- (\r : {x : int -> int} . (r.x)) {y=0 x=(\x : int. x)} : int -> int
// 
// ===
// () |- (\x : {x : int} . (x.x)) {y=0 x=0} : int