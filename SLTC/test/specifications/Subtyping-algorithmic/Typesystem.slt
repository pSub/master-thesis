module Typesystem

language specifications/Subtyping-algorithmic/SimplyTypedLambdaCalculus

meta-variables 	Term "~" { Type Exp }
				Ctx "$" { Context }
				Id "%" { ID }
				R "$" {TRecordEntries RecordEntries}
				Num "&" { Int }

contexts Context := ID{I} x Type{O}

judgments
Context{I} "|-" Exp{I} ":" Type{O}.
TRecordEntries{I} "has" Exp{I} ":" Type{I}.
ID{I} "!=" ID{I} is Neq.

rules

/* Typing rules */

============== T-int
$C |- &i : int

%x : ~T in $C
============== T-var
$C |- %x : ~T

(%x : ~T1 ; $C) |- ~e : ~T2
================================= T-abs
$C |- \ %x : ~T1 . ~e : ~T1 -> ~T2

$C |- ~e1 : ~T11 -> ~T12
$C |- ~e2 : ~T2
========================= T-app
$C |- ~e1 ~e2 : ~T12

$C |- ~e : { $R }
$R has %l : ~T
========================= T-proj
$C |- ~e . %l : ~T

============= T-empty
$C |- {} : {}

$C |- ~e : ~T
$C |- { $R } : { $S }
=====================================  T-record
$C |- { %l = ~e $R } : { %l : ~T $S }

/* Checks whether some label exists in TRecordEntries */
%m != %l
$R has %l : ~T
======================
%m : ~T $R has %l : ~T

======================
%l : ~T $R has %l : ~T