module Typesystem

language specifications/Subtyping-algorithmic/SimplyTypedLambdaCalculus

contexts Context := ID{I} x Type{O}

meta-variables  Term "~" { Type Exp }
                Ctx "$" { Context }
                Id "%" { ID }
                R "$" {TRecordEntries RecordEntries}
                Num "&" { Int }

judgments
Context{I} "|-" Exp{I} ":" Type{O}.
TRecordEntries{I} "has" Exp{I} ":" Type{I}.
ID{I} "!=" ID{I} is Neq.
Type{I} "=" Type{I} is Eq.

rules

/* Typing rules */

============== T-int
$C |- &i : int

%x : ~T in $C
============== T-var
$C |- %x : ~T

(%x : ~T1 ; $C) |- ~e : ~T2
================================= T-abs
$C |- \ %x : ~T1 . ~e : ~T1 -> ~T2

$C |- ~e1 : ~T11 -> ~S
$C |- ~e2 : ~T2
~T2 = ~T11
========================= T-app
$C |- ~e1 ~e2 : ~S

$C |- ~e : { $R }
$R has %l : ~T
========================= T-proj
$C |- ~e . %l : ~T

============= T-empty
$C |- {} : {}

$C |- ~e : ~T
$C |- { $R } : { $S }
=====================================  T-record
$C |- { %l = ~e $R } : { %l : ~T $S }

/* Checks whether some label exists in TRecordEntries */
%m != %l
$R has %l : ~T
====================== a
%m : ~T $R has %l : ~T

====================== b
%l : ~T $R has %l : ~T

conjectures

===
() |- {x=0 y=1} : {x : int y : int}

===
() |- {x=0 y=1}.x : int

===
() |- {y=0 x=1}.x : int

===
() |- \x : {y : int} . x : { y : int } -> { y : int }

===
() |- (\x : {y : int} . x) {y=1} : { y : int }

===
() |- (\x : {x : int} . x) {x=1} : { x : int }
 
===
(r : {x : int y : int} ; ()) |- r . x : int

===
() |- (\r : {x : int} . (r.x)) : { x : int } -> int