module Typesystem

language specifications/secure-flow-analysis/Language

contexts LocationTyping := Int{I} x PhraseType{O}
         VariableTyping := ID{I} x PhraseType{O}

meta-variables 	Type "~" { DataType }
                Exp "~1" { Exp }
                Cmd "~2" { Cmd }			
				Dom "$" { LocationTyping VariableTyping }
				Id "%" { ID }
				Num "&" { Int }

judgments
LocationTyping{I} ";" VariableTyping{I} "|-" Phrase{I} ":" PhraseType{O}.

rules

=================== INT
$l ; $c |- &n : ~t

%x : ~t var in $c
====================== VAR
$l ; $c |- %x : ~t var

&l : ~t var in $l
=========================== VARLOC
$l ; $c |- loc &l : ~t var

$l ; $c |- ~1e : ~t
$l ; $c |- ~1f : ~t
====================== ARITH
$l ; $c |- ~1e + ~1f : ~t

$l ; $c |- ~1e : ~t var
====================== R-VAL
$l ; $c |- ~1e : ~t

$l ; $c |- ~1e : ~t var
$l ; $c |- ~1f : ~t
======================= ASSIGN
$l ; $c |- ~1e := ~1f : ~t cmd

$l ; $c |- ~2c : ~t cmd
$l ; $c |- ~2d : ~t cmd
========================== COMPOSE
$l ; $c |- ~2c ; ~2d : ~t cmd

$l ; $c |- ~1e : ~t
$l ; $c |- ~2c : ~t cmd
$l ; $c |- ~2d : ~t cmd
============================================== IF
$l ; $c |- if ~1e then ~2c else ~2d : ~t cmd

$l ; $c |- ~1e : ~t
$l ; $c |- ~2c : ~t cmd
===================================== WHILE
$l ; $c |- while ~1e do ~2c : ~t cmd

$l ; $c |- ~1e : ~t
$l ; (%x : ~t ; $c) |- ~2c : ~s cmd
============================================ LETVAR
$l ; $c |- letvar %x := ~1e in ~2c : ~s cmd

conjectures

===
(); (x : high var; y : low var; ()) |- if 1 then y := 1 else y := 0 : high cmd