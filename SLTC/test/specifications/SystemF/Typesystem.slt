module SystemF/Typesystem

imports SystemF/Freshness hiding (language)
        SystemF/Substitution hiding (language)

language specifications/SystemF/SystemF

contexts
TermBinding := ID{I} x Type{O}
TypeBinding := ID{I}

meta-variables  Term "~" { Type Exp }
                Ctx "$" { TermBinding TypeBinding }
                Id "%" { ID }
                Num "&" { Int }

judgments
TermBinding{I} "|" TypeBinding{I} "|-" Exp{I} ":" Type{O}.
Type{O} "= [" ID{I} "->" Type{I} "]" Type{I}.
ID{I} "!=" ID{I} is Neq.

rules

/* Typing rules */

%x : ~T in $C1        @error %x "should have type" ~T "but has type" {}.
=============== T-Var
$C1 | $C2 |- %x : ~T

============== T-int
$C1 | $C2 |- &i : int

(%x : ~T1 ; $C1) | $C2 |- ~t2 : ~T2     @error ~t2 "should have type" ~T2 "but has type" {}.
==================================== T-Abs
$C1 | $C2 |- \ %x : ~T1 . ~t2 : ~T1 -> ~T2

$C1 | $C2 |- ~t1 : ~T11 -> ~T12     @error ~t1 "should have type" ~T11 "->" ~T12 "but has type" {}.
$C1 | $C2 |- ~t2 : ~T11             @error ~t2 "should have type" ~T11 "but has type" {}.
================================ T-App
$C1 | $C2 |- ~t1 ~t2 : ~T12

$C1 | (%x ; $C2) |- ~t2 : ~T2           @error ~t2 "should have type" ~T2 "but has type" {}.
%x fresh in $C2
======================================= T-Tabs
$C1 | $C2 |- \ %x . ~t2 : all %x . ~T2

~U = [ %x -> ~S ] ~T            @error ~U "is not" ~T "where" %x "is replaced by" ~S.
$C1 | $C2 |- ~e : all %x . ~T   @error ~e "should have type all" %x "." ~T "but has type" {}.
============================== T-Tapp
$C1 | $C2 |- ~e [ ~S ] : ~U

conjectures

/* Positive conjectures */

===
() | () |- \ x . \ y : x . y : all x . (x -> x)

===
() | () |- \ x . \ f : x -> x . \ a : x . (f (f a)) : all x . ((x -> x) -> (x -> x))

===
() | () |- (\ x . \ y : x . y) [ int ] : int -> int

===
() | () |- (\ x . \ f : x -> x . \ a : x . (f (f a))) [ int ] : (int -> int) -> (int -> int)

===
() | () |- (\ x . \ f : x -> x . \ a : x . (f (f a))) [ int -> int ] : ((int -> int) -> (int -> int)) -> ((int -> int)-> (int -> int))

===
() | (x ; ()) |- \ y . (\ f : x . f) : all y . (x -> x)

===
() | () |- (\ x . \ y . \ z : x . z) : all x . all y . (x -> x)

===
() | () |- (\ x . \ y . \ z : y . z) : all x . all y . (y -> y)

===
() | () |- (\ x . \ y . \ z . \ a : y . a) : all x . all y . all z . (y -> y)

===
() | () |- (\ x . \ y . \ z : x . z) [ int ] : all y . (int -> int) 

/* Negative Conjectures */

/===
() | () |- \ x : int . x : int

/===
() | () |- (\x : int . x) x : int

/===
() | () |- 1 1 : int

/======
f : int ; () | () |- f 1 : int

/======
f : (int -> int); () | () |- f f : int

/===
() | () |- x : int

/===
() | () |- \ x . \ y : x . y : all x . x

/===
() | () |- (\ x . \ y : y . y) [ int ] : int -> int

/===
() | () |- (\ x . \ y . \ x . \ a : y . a) : all x . all y . all z . (y -> y)