module test

language PCF

meta-variables	Term "~" { Type Exp }
				Ctx "$" { Context }
				Id "%" { ID }
				Num "&" { INT }

contexts Context := ID{I} x Type{O}

judgments 

Context{I} "|-" Exp{I} ":" Type{O}.
Type{I} "<:" Type{I}.

rules

%X : ~T in $C
=============== T-var
$C |- ~X : ~T
 
(%X : ~S ; $C) |- ~E : ~T
===================================== T-abs
$C |- (fun %X : ~S (~E)) : ~S -> ~T
 
$C |- ~E : ~S -> ~T
$C |- ~F : ~S
==================== T-app
$C |- ~E ~F : ~T

(%f : ~T -> ~T ; $C) |- ~e : ~T -> ~T 
=========================================
$C |- fix %f : ~T -> ~T ( ~e ) : ~T -> ~T

$C |- ~e1 : ~T
(%x : ~T ; $C) |- ~e2 : ~U 
===============================
$C |- let %x : ~T = ~e1 in ~e2 : ~U

==============
$C |- &i : int

$C |- ~e1 : int
$C |- ~e2 : ~T
$C |- ~e3 : ~T
====================================
$C |- ifz ~e1 then ~e2 else ~e3 : ~T

$C |- ~e1 : int
$C |- ~e2 : int
====================
$C |- ~e1 + ~e2 : int

$C |- ~e1 : int
$C |- ~e2 : int
====================
$C |- ~e1 - ~e2 : int

$C |- ~e1 : int
$C |- ~e2 : int 
====================
$C |- ~e1 * ~e2 : int 

$C |- ~e1 : int
$C |- ~e2 : int
====================
$C |- ~e1 / ~e2 : int

conjectures
() |- 1 : int
(a : int ; ()) |- x + 1 : int