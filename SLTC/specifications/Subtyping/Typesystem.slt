module Typesystem

language SimplyTypedLambdaCalculus

meta-variables 	Term "~" { Type Exp }
				Ctx "$" { Context }
				Id "%" { ID }
				R "$" {TRecordEntries RecordEntries}
				Num "&" { Int }

contexts Context := ID{I} x Type{O}

judgments
Context{I} "|-" Exp{I} ":" Type{O}.
Type{I} "<:" Type{I}.

rules

/* Typing rules */

============== T-int
$C |- &i : int

%x : ~T in $C
============== T-var
$C |- ~x : ~T

(%x : ~T ; $C) |- ~t : ~T
================================= T-abs
$C |- \ %x : ~T . ~t : ~T -> ~T

$C |- ~t1 : ~T11 -> ~T12
$C |- ~t2 : ~T2
~T2 <: ~T11
========================= T-app
$C |- ~t1 ~t2 : ~S


/* This rule does not look like it is working */
$C |- ~t : { %l : ~T $R }
========================= T-proj
$C |- ~t . %l : ~T

============= T-empty
$C |- {} : {}

$C |- ~e : ~T
$C |- { $R } : { $S }
=====================================  T-record
$C |- { %l = ~e $R } : { %l : ~T $S }

/* Definition of the subtyping relation */

========
~S <: ~S 

/* Transitivity */
~S <: ~T
~T <: ~U
========
~S <: ~U

~T1 <: ~S1
~S2 <: ~T2
========================
~S1 -> ~S2 <: ~T1 -> ~T2

/* Record Subtyping */

============
{ $R } <: {}

~T <: ~S
{ $R } <: { $U }
=============================== depth
{ %l : ~T $R } <: { %l : ~S $U }

{ $R } <: { $S }
=============================== width
{ %l : ~T $R } <: { %l : ~T $S}


conjectures

===
{} <: {}

===
{ abc : int } <: {}

===
{ l : int m : int } <: { l : int}

===
{ l : {o : int} } <: { l : {}}

===
() |- {x=0 y=1} : {x : int y : int}

===
() |- {x=0}.x : int