module sdf-utils

imports libstratego-sdf
imports org/sugarj/languages/Sdf2

signature
    constructors
        // FIXME: Somehow this constructor is not defined in org/sugarj/languages/Sdf2
        cons: String -> Dummy

rules
    
    /**
     * Wrapper around `parse-sdf-defintion-file' that works with the language attribute
     * specified in the specifications.
     *
     * @type a -> ATerm
     * @param String
     */
    parse-sdf-definition(|language) = <concat-strings; parse-sdf-definition-file> ["syntax/", language, ".def"]

    /**
     * Extract the immediate substructures for a given term.
     * Used for case-distinction and structural induction.
     *
     * @type String -> List(ATerm)
     * @param String
     */
    get-immediate-substructures(|language) =
        ?non-terminal;
        parse-sdf-definition(|language);
        collect-all(?prod(_,sort(non-terminal),_));
        map(construct-substructure)

    /**
     * Creates a term from sdf productions.
     *
     * @type prod(_) -> ATerm
     */
    construct-substructure =
        ?prod(consituents, _, attributes);
        <mkterm> (<fetch-constructor> attributes,
                  <filter(?sort(_))> consituents)

    /**
     * Extracts the constructor from the attribute set of an sdf production.
     *
     * @type attrs(_) -> String
     */
    fetch-constructor = ?attrs(attributes); <fetch-elem(?term(cons(constructor)); !constructor)> attributes
    
    get-productions-for-constructor(|language) =
        ?constructor;
        parse-sdf-definition(|language);
        collect-all(where(?prod(_, _, attrs(<id>)); \attributes -> <elem> (term(cons(constructor)), attributes)\))