module utils
    
rules

    /**
     * Creates the equivalence class defined by `eq'.
     *
     * @param eq : (a, a) -> b
     * @type List(a) -> List(List(a))
     */
    group(eq) : [] -> []
    group(eq) : [x | xs] -> [[x|matching] | <group(eq)> xs']
        where matching := <filter(where(\y -> <eq> (x, y)\))> xs;
              xs' := <diff> (xs, matching)
    /**
     * A wrapper around `gt'.
     *
     * @param y : Int
     */
    gt(|y) : x -> <gt> (x, y)

    /**
     *
     */
    zip(|xs) : ys -> <zip> (xs, ys)

    /**
     * String representation for Option values. Some(s) is projected
     * to s and None() is projected to the empty string.
     *
     * @type Option(a) -> a | String
     */
    option-to-string : Some(s) -> s
    option-to-string : None()  -> ""

    /**
     * String representation for Option values. Some(s) is projected
     * to s and None() is projected to a random string prefixed with `l`.
     * The random string is created with <newname>.
     *
     * @param l - prefix for random string
     * @type Option(a) -> a | String
     */
    option-to-string-newname(|l) : Some(s) -> s
    option-to-string-newname(|l) : None() -> <make-fresh> l

    /**
     * Takes a rule `f` and a default value `s`. None() is rewritten to
     * the default value. Some(s') is rewritten to `f` applied to `s'`.
     *
     * @param f - some arbitary strategy
     * @param s - some arbitary term
     * @type Option(a) -> b
     */
    maybe(f|s) : None() -> s
    maybe(f|s) : Some(s') -> <f> s' 

    /**
     * Creates a list of `n` random strings prefixed with `l`.
     *
     * @param l - an arbitary string
     * @type Int -> [String]
     */
    newnames(|l) : 0 -> []
    newnames(|l) : n -> [<make-fresh> l | <dec; newnames(|l)> n]

    /**
     * Converts a list like data structure into a list.
     *
     * `c1` is the constructor representing `Nil`. It can possibly have
     * one argument. `c2` is the constructor representing `Cons`. It has
     * exactly two arguments, the first is arbitary and the second is
     * either `c1` or `c2`.
     *
     * @param c1 - an constructor with zero or one argument
     * @param c2 - an constructor with exactly two arguments
     * @type a -> [b]
     */
    to-list(c1, c2) : c1#([]) -> []
    to-list(c1, c2) : c1#([arg1]) -> [arg1]
    to-list(c1, c2) : c2#([arg1, arg2]) -> [arg1 | <to-list(c1,c2)> arg2]

    /**
     * Projects the `n`-th argument of constructor `c`.
     *
     * @param c - an constructor with at least `n` arguments
     * @param n - a natural number
     * @type a -> b
     */
    proj(c|n) : c#(args) -> <index(|n)> args

    /**
     * Replaces all `old-node` with `new-node` in `ast`.
     *
     * @param old-node - an arbitrary term
     * @param new-node - an arbitrary term
     * @param ast - an arbitrary term
     * @type a
     */
    replace(|old-node, new-node, ast) = <alltd(?old-node; !new-node)> ast

    /**
     * Like `replace', but only terms are substitued for which `select' succeeds.
     *
     * @param selects which terms should be substituted
     * @param the node that should be replaced
     * @param the substitute for the old node
     * @param the term to which the substitution should be applied
     */
    replace(select|old-node, new-node, ast) = <innermost(\ current-node ->
                                                                 <select> (old-node, current-node)
                                                         \; !new-node)> ast

    /**
     * Replaces all `old-node` with `new-node` in `ast`.
     *
     * @param old-node - an arbitrary term
     * @param new-node - an arbitrary term
     * @type a -> b
     */
    replace(|old-node, new-node) : ast -> <replace(|old-node, new-node, ast)>

    /**
     * Replaces all `old-node` with `new-node` in `ast`.
     *
     * @param ast - an arbitrary term
     * @type (a, b) -> c
     */
    replace(|ast) : (old-node, new-node) -> <replace(|old-node, new-node, ast)>

    /**
     * Like `replace', but only terms are substitued for which `select' succeeds.
     *
     * @param selects which terms should be substituted
     * @param the term to which the substitution should be applied
     * @type (ATerm, ATerm) -> ATerm
     */
    replace(select|ast) : (old-node, new-node) -> <replace(select|old-node, new-node, ast)>

    /**
     * Wraps around `replace`. Recieves a list of substitution pairs and replaces
     * those in `ast` from left to right.
     *
     * @param ast - an arbitrary term
     * @type List((a, b)) -> c
     */
    replace-all(|ast) : substitutions -> <foldl(\(subst, ast') -> <replace(|ast')> subst\)> (substitutions, ast)

    /**
     * Like `replace-all', but substitions are only applied to terms, for which
     * `select' succeeds.
     *
     * @param selects which terms should be substituted
     * @param the term to which the substitutions should be applied
     * @type List(ATerm, ATerm) -> ATerm 
     */
    replace-all(select|term) : substitutions -> <foldl(\(subst, term') -> <replace(select|term')> subst\)> (substitutions, term)

    /**
     * Applies the substituions from left to right. Each substitution is only applied to
     * the first match.
     *
     * @param the term to which the substitutions should be applied
     * @type List(ATerm, ATerm) -> ATerm
     */
    replace-once(|term) : substitutions -> <foldl(\((x, t), i) -> <try(oncetd(?x; !t))> i\)> (substitutions, term)

    /** 
     * Duplicate a term into a three-element tuple
     *
     * @type a -> Tuple(a, a, a)
     */  
    Trpl : v -> (v, v, v)

    /**
     * Computes all tails of the given list.
     *
     * @type List(a) -> List(List(a))
     */
    tails : xs -> [xs | <if [] then [] else <Tl; tails> xs end> xs]

    /**
     * Creates a list containing soely the passed term. Same as `MkSingelton'
     * which is declared internal.
     *
     * @type a -> List(a)
     */
    singelton : x -> [ x ]

    /**
     * Convenience wrapper around `isect`.
     *
     * @param set1 - some arbitary list
     * @type List(a) -> List(a)
     */
    isect(|set1) : set2 -> <isect> (set1, set2)

    /**
     * Convenience wrapper around `diff'.
     *
     * @param set2 - some arbitary list
     * @type List(a) -> List(a)
     */
    diff(|set2) : set1 -> <diff> (set1, set2)

    /**
     * Convenience wrapper around `conc`.
     *
     * @param l - some arbitary list
     * @type List(a) -> List(a)
     */
    conc(|l) : l' -> <conc> (l, l')

    /**
     * Forget about the constructor and return the
     * arguments as a tuple.
     *
     * @type a -> (a, b, ...)
     */
    to-tuple = get-arguments; ListToTuple

    /**
     * Topological sort of the passed graph.
     *
     * The graph is represented as a list of tuples. The first element
     * is the node and the second is a list of nodes to which outgoing
     * edges exist.
     *
     * Warning: This is the usual topological sort algorithm, but traverses
     * the graph in reversed order, since the input graph is defined by
     * its outgoing edges. Therefore the resulting ordering is reversed.
     *
     * @type List(a, List(a)) -> List(a)
     */
    top-sort : graph -> <top-sort'; reverse> (graph, <filter(where(Snd; equal([])); Fst)> graph, [])

    /** @internal */
    top-sort' : (graph, [], L) -> <if <has-edges> graph
                                   then fail
                                   else !L
                                   end>
    top-sort' : (graph, [n|S], L) -> <top-sort'> (graph', S', [n|L])
        where graph' := <filter((not(?n), id)); map((id, filter(not(?n))))> graph;
              S' := <filter(where(Snd; equal([])); Fst)> graph'

    /**
     * Checks whether the input graph contains at least one edge.
     *
     * @type a -> a
     */
    has-edges = some(Snd; not(equal([])))

    /**
     * Applys strategy `s' to the elements of the list until it succeeds
     * and returns the result. Fails otherwise
     *
     * @param s - an arbitary startegy
     * @type List(a) -> b
     */
    until(s) : [] -> <fail>
    until(s) : [x | xs] -> <<s> x < id + <until(s)> xs>

    /**
     * Deletes at most one occurence of the element in the list.
     *
     * @type (a, List(a)) -> List(a)
     */
    delete : (y, []) -> []
    delete : (y, [y | xs]) -> xs
    delete : (y, [x | xs]) -> [x | <delete> (y, xs)]

    /**
     * Computes the n-ary cartesian product.
     */
    cartesian-product = foldr(![[]], \(l, a) -> <mapconcat(\x -> <map(\xs -> [x|xs]\)> a\)> l\)

    /**
     * A version of `hashtable-copy' that can deal with hashtables that
     * contain hashtables.
     *
     * @type HashTable(K, V) -> HashTable(K,V)
     */
    hashtable-deep-copy = hashtable-getlist; map(alltd(?Hashtable(_); hashtable-deep-copy)); hashtable-init

    /**
     * A version of hashtable-deep-copy that ensures that the copy is released after the
     * computation `s' has finished. Only copy the hashtable if  `cond' succeeds on `value'.
     *
     * @param s has type (Hashtable(_), a) -> b
     * @param hashtable has type Hashtabe(_)
     * @type a -> b
     */
    safe-hashtable-deep-copy(s | hashtable) = safe-hashtable-deep-copy(s, true | hashtable, 1)
    safe-hashtable-deep-copy(s, cond | hashtable, value) =
        if <cond> value
        then finally(where(hashtable' := <hashtable-deep-copy> hashtable);
                     \input -> <s> (hashtable', input)\,
                     where(<hashtable-deep-destroy> hashtable'))
        else \input -> <s> (hashtable, input)\
        end

    /**
     * Destroys the Hashtable and all containing Hashtables.
     *
     * @type Hashtable(_) -> Hashtable(_)
     */
    hashtable-deep-destroy = where(hashtable-values; map(alltd(?Hashtable(_); hashtable-deep-destroy))); hashtable-destroy
    
    
    /**
     * Appends a fresh integer at the end of a string. The counter
     * can be controlled with Fresh.
     *
     * @author: Sebastian Erdweg
     */    
    make-fresh : v -> w
    where
        i := <Fresh> v;
        rules ( Fresh :+ v -> <inc> i);
        w := <conc-strings> (v, <int-to-string> i)
    make-fresh : v -> w
    where
        rules ( Fresh :+ v -> 0);
        w := <make-fresh> v

    /**
     * Meta-variables are equal independent of the error annotation.
     */
    meta-variable-equal : (cons1#([name1, _]), cons2#([name2, _])) ->
        <where(<equal> (cons1, cons2);
               <equal> (name1, name2))>

    /**
     * Checks whether the given string is a meta-variable constructor name.
     *
     * @type String -> String
     */
    is-meta-variable = is-generic(|"MetaVariable")

    /**
     * Checks whether the given string is a context binding constructor name.
     *
     * @type String -> String
     */
    is-ctx-bind = is-generic(|"ContextBind")

    /**
     * Checks whether the given string is a context lookup constructor name.
     *
     * @type String -> String
     */
    is-ctx-lookup = is-generic(|"ContextLookup")

    /**
     * Checks whether the given term is a meta-variable.
     *
     * @type a -> a
     */
    node-is-meta-variable = node-is-generic(|"MetaVariable")

    /**
     * Checks whether the given term is a context binding.
     *
     * @type a -> a
     */
    node-is-ctx-bind = node-is-generic(|"ContextBind")

    /**
     * Checks whether the given term is a context lookup.
     *
     * @type a -> a
     */
    node-is-ctx-lookup = node-is-generic(|"ContextLookup")

    /**
     * Checks whether the given node is an empty context.
     *
     * @type a -> a
     */
    node-is-ctx-empty = node-is-generic(|"ContextEmpty")

    /**
     * Checks whether the given node is a context meta-variable.
     *
     * @type a -> a
     */
    node-is-ctx-var = and(node-is-meta-variable, get-context-id)
    
    /**
     *
     */
    node-is-judgment = is-generic(|"TypingJudgment") <+ is-generic(|"Eq") <+
                       is-generic(|"Neq")

    /**
     * Checks whether the given node is some form of context.
     *
     * @type a -> a
     */
    node-is-ctx = node-is-ctx-bind <+
                  node-is-ctx-lookup <+
                  node-is-ctx-empty <+
                  node-is-ctx-var

    /**
     * Splits the given string at '-' and compares the first part with `name'.
     *
     * @param name - an arbitrary string
     * @type String -> String
     */
    is-generic(|name) = string-tokenize(|<singelton> '-'); Hd; equal(|name)

    /**
     * Applies `is-generic' to the constructor of the node. If is-generic succeeds
     * it behaves like `id'.
     *
     * @param name - an arbitrary string
     * @type a -> a
     */
    node-is-generic(|name) = where(get-constructor; is-generic(|name))

    /**
     * Splits the construtor name of the given node at '-' and returns the last part.
     *
     * @type a -> String
     */
    get-generic-name = get-constructor; string-tokenize(|<singelton> '-'); last

    /**
     * The generic name of contexts is a number. This strategy retrieves the
     * generic name as a real integer.
     *
     * @type a -> Int
     */
    get-context-id = get-generic-name; string-to-int
    
    /**
     * The generic name of user defined judgments is a number. This strategy retrieves the
     * generic name as a real integer.
     *
     * @type a -> Int
     */
    get-judgment-id = get-generic-name; string-to-int

    /**
     * Auxiliary strategy to detect failures of strategies/rules. It prints the current
     * term and a stacktrace.
     *
     * Note: The stacktrace might not contain all strategies due to e.g. inlining. See
     * the documentation of lang/stacktrace for details.
     */
    failed(|parameters) = debug(!"Current Term: ");
                          <if(where(length; gt(|0)), debug(!"Parameters: "))> parameters;
                          stacktrace-get-all-frame-names; report-failure
    failed = failed(|[])

    /**
     * Stops the execution. Only for unrecoverable errors.
     */
    exit-with-error(|error-msg, error-number) = <debug> error-msg; <exit> error-number