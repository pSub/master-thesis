module constraint-template-language

imports utils

signature
    sorts Rule Lookup Judgment Neq
    constructors
       /** Base Language */
       Conclusion__ : judg-number * Option(String) * Pattern * Outputs -> Conclusion
       Template__ : List(List(var)) * List(premisse) * Conjecture * Constraint -> Template

       /** Extended Language */
       Fork__ : List(Rule) -> Rule

       Lookup__  : ctx * inputs -> Lookup
       Reset__ : ctx -> Reset
       Ctx__ : ctx -> Ctx
       Judgment__ : number * term * binding -> Judgment
       Eq__ : term * term * info -> Eq
       Neq__ : term * term * info -> Neq

rules  

    /**
     * Extracts the pattern from Rule, Binding or Fork
     *
     * @type Rule -> List(a)
     */
    get-pattern : Conclusion__(_, _, (pattern, _), _) -> pattern
    get-pattern : Template__(_, _, rule, _) -> <get-pattern> rule
    get-pattern : Fork__([rule | _]) -> <get-pattern> rule

    /**
     * Extracts the context pattern from Rule, Binding or Fork
     *
     * @type Rule -> List(a)
     */
    get-ctx-pattern : Conclusion__(_, _, (_, ctx), _) -> ctx
    get-ctx-pattern : Template__(_, _, rule, _) -> <get-ctx-pattern> rule
    get-ctx-pattern : Fork__([rule | _]) -> <get-ctx-pattern> rule

    /**
     * Extracts the judgment number from the conclusion.
     *
     * @type Rule -> Int
     */
    get-judgment-number : Conclusion__(judg-number, _, _, _) -> judg-number
    get-judgment-number : Template__(_, _, rule, _) -> <get-judgment-number> rule
    get-judgment-number : Fork__([rule | _]) -> <get-judgment-number> rule

    /**
     * Extracts the name from the conclusion.
     *
     * @type Rule -> Int
     */
    get-rule-name : Conclusion__(_, name, _, _) -> name
    get-rule-name : Template__(_, _, rule, _) -> <get-rule-name> rule

    /**
     * Transforms a triple into a judgment node
     *
     * @type (name, a, b) -> Judgment(name, a, b)
     */
    mkJudgment : (name, a, b) -> Judgment__(name, a, b)

    /**
     * Transforms a tuple into a lookup node
     *
     * @type (a, b) -> Lookup(a, b)
     */
    mkLookup : (a, b) -> Lookup__(a, b)

    /**
     * Transforms a tuple into a fork node
     *
     * @type List(Rule) -> Fork(List(Rule))
     */
    mkFork : xs -> Fork__(xs)

    makeEq(|info) : (a, b) -> Eq__(a, b, info)
    makeNeq(|info) : (a, b) -> Neq__(a, b, info)

    /**
     * Extracts the context id from a context modification of a template.
     * @internal
     */
    get-ctx-id = proj(Reset__|1) <+ proj(Ctx__|1) <+ Fst