module constraint-template-language

signature
    sorts Rule Lookup Judgment Neq
    constructors
       /** Base Language */
       Rule : Option(String) * Pattern * Outputs * Constraints -> Rule
       Binding : List(List(var)) * List(call) * Rule -> Rule

       /** Extended Language */
       Fork : List(Rule) -> Rule

       Lookup  : ctx * inputs -> Lookup
       Reset : ctx -> Reset
       Judgment : term * binding -> Judgment
       Neq : term * term -> Neq

rules  

    /**
     * Extracts the pattern from Rule, Binding or Fork
     *
     * @type Rule -> List(a)
     */
    get-pattern : Rule(_, (pattern, _), _, _) -> pattern
    get-pattern : Binding(_, _, rule) -> <get-pattern> rule
    get-pattern : Fork([rule | _]) -> <get-pattern> rule

    /**
     * Extracts the context pattern from Rule, Binding or Fork
     *
     * @type Rule -> List(a)
     */
    get-ctx-pattern : Rule(_, (_, ctx), _, _) -> ctx
    get-ctx-pattern : Binding(_, _, rule) -> <get-ctx-pattern> rule
    get-ctx-pattern : Fork([rule | _]) -> <get-ctx-pattern> rule

    /**
     * Transforms a tuple into a judgment node
     *
     * @type (a, b) -> Judgment(a, b)
     */
    mkJudgment : (a, b) -> Judgment(a, b)

    /**
     * Transforms a tuple into a lookup node
     *
     * @type (a, b) -> Lookup(a, b)
     */
    mkLookup : (a, b) -> Lookup(a, b)

    /**
     * Transforms a tuple into a fork node
     *
     * @type List(Rule) -> Fork(List(Rule))
     */
    mkFork : xs -> Fork(xs)