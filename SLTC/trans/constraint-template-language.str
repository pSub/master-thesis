/**
 * Defines the constructors of the templates and provides
 * auxiliary definitions.
 */
module constraint-template-language

imports utils
imports sdf-utils
imports include/SLTC
imports org/sugarj/languages/Sdf2

signature
    sorts Template Conclusion Premise Ctx
    constructors
       /** Base Language */
       Template__ : Option(String) * List((Premise, Dependency)) * Conclusion -> Template
       Conclusion__ : judg-number * Pattern * Outputs -> Conclusion
       Judgment__ : judg-number * term * binding * outputs * error -> Premise
       Lookup__  : ctx * inputs * outputs * error -> Premise
       Eq__ : judg-number * term * term * error -> Premise
       Neq__ : judgment-number * term * term * error -> Premise
       Reset__ : ctx -> Ctx
       Ctx__ : ctx -> Ctx
       Binding__ : ctx * inputs * outputs -> Ctx

       /** Extended Language */
       Fork__ : List(Template) -> Template

rules

    /**
     * Extracts the premisses from a template.
     *
     * @type Template -> List((PRemise, Dependency))
     */
    get-premisses : Template__(_, premisses, _) -> premisses
    get-premisses = failed

    /**
     * Updates the premisses of a template
     *
     * @param List((Premise, Dependency))
     * @type Template -> Template
     */
    set-premisses(|premisses) : Template__(name, _, conclusion) -> Template__(name, premisses, conclusion)
    set-premisses(|premisses) = failed(|[premisses])

    /**
     * Extracts the inputs from a premise.
     *
     * @type Premise -> Inputs
     */
    get-premise-inputs : Binding__(_, inputs, _) -> inputs
    get-premise-inputs : Judgment__(_, inputs, bindings, _, _) ->
        <conc> (inputs, <mapconcat(get-premise-inputs)> bindings)
    get-premise-inputs : Lookup__(_, inputs, _, _) -> inputs
    get-premise-inputs : Eq__(_, a, b, _) -> [a, b]
    get-premise-inputs : Neq__(_, a, b, _) -> [a, b]

    /**
     * Extracts the outputs from a premise.
     *
     * @type Premise -> Inputs
     */
    get-premise-outputs : Binding__(_, _, outputs) -> outputs
    get-premise-outputs : Judgment__(_, _, bindings, outputs, _) ->
        <conc> (outputs, <mapconcat(get-premise-outputs)> bindings)
    get-premise-outputs : Lookup__(_, _, outputs, _) -> outputs
    get-premise-outputs : Eq__(_, _, _, _) -> []
    get-premise-outputs : Neq__(_, _, _, _) -> []

    /**
     * Succeeds if the input is a premise and fails otherwise.
     *
     * @type Premise -> Premise
     */
    is-premise = ?Judgment__(_,_,_,_,_) <+ ?Lookup__(_,_,_,_) <+ ?Eq__(_,_,_,_) <+ ?Neq__(_,_,_,_)

    /**
     * Extracts the pattern of the conclusion from a template.
     *
     * @type Template -> List(a)
     */
    get-pattern : Conclusion__(_, (pattern, _), _) -> pattern
    get-pattern : Template__(_, _, template) -> <get-pattern> template
    get-pattern : Fork__([template | _]) -> <get-pattern> template
    get-pattern = failed

    /**
     * Extracts the context pattern of the conclusion from a template.
     *
     * @type Template -> List(Ctx)
     */
    get-ctx-pattern : Conclusion__(_, (_, ctx), _) -> ctx
    get-ctx-pattern : Template__(_, _, template) -> <get-ctx-pattern> template
    get-ctx-pattern : Fork__([template | _]) -> <get-ctx-pattern> template
    get-ctx-pattern = failed

    /**
     * Extracts the judgment number of the conclusion from a template.
     *
     * @type Template -> Int
     */
    get-conclusion-judgment-number : Conclusion__(judg-number, _, _) -> judg-number
    get-conclusion-judgment-number : Template__(_, _, template) -> <get-conclusion-judgment-number> template
    get-conclusion-judgment-number : Fork__([template | _]) -> <get-conclusion-judgment-number> template
    get-conclusion-judgment-number = failed

    get-judgment-number : Judgment__(num, _, _, _, _) -> num
    get-judgment-number : Eq__(num, _, _, _) -> num
    get-judgment-number : Neq__(num, _, _, _) -> num
    get-judgment-number = failed

    /**
     * Extracts the name of the template.
     *
     * @type Template -> Option(String)
     */
    get-template-name : Template__(name, _, template) -> name
    get-template-name = failed
    
    /**
     * Extract the outputs of the conclusion from the template.
     *
     * @type Template -> Option(Outputs)
     */
    get-outputs : Conclusion__(_, _, outputs) -> Some(outputs)
    get-outputs : Template__(_, _, template) -> <get-outputs> template
    get-outputs : Fork__(_) -> None()
    get-outputs = failed
    
    /**
     * Transforms a list of templates into a fork node. Forks created
     * with this rule will not be nested, i.e. the templates of all forks
     * in the input are extracted from the fork and inserted in the new fork.
     *
     * @type List(Template) -> Fork(List(Template))
     */
    mkFork : ts -> Fork__(<map(try(\Fork__(ts') -> ts'\)); flatten-list> ts)
    mkFork = failed

    /**
     * Transforms a tuple into a equality node.
     *
     * @param error - Error
     * @type (a, b) -> Eq(a, b)
     */
    makeEq(|error, number) : (a, b) -> Eq__(number, a, b, error)
    makeEq(|error, number) = failed(|[error])

    /**
     * Transforms a tuple into a inequality node.
     *
     * @param error - Error
     * @type (a, b) -> Neq(a, b)
     */
    makeNeq(|error, number) : (a, b) -> Neq__(number, a, b, error)
    makeNeq(|error, number) = failed(|[error])

    /**
     * Extracts the context id from a context modification.
     *
     * @type Ctx -> Int
     */
    get-ctx-id = proj(Reset__|1) <+ proj(Ctx__|1) <+ proj(Binding__|1)
    get-ctx-id = failed

    /**
     * Succeeds if the node is a context modification and fails otherwise.
     *
     * @type Ctx -> Ctx
     */
    is-ctx-modification = ?Reset__(_) <+ ?Ctx__(_) <+ ?Binding__(_, _, _)

    get-judgment-types(is-ctx | judgment) = get-judgment-types(is-ctx, id | judgment)

    get-judgment-types(is-ctx, type-check | judgment) =
        index(|judgment);
        \decl -> <conc> (<collect-om(\Hole(non-terminal, type) ->
                                 <where(<type-check> type)> non-terminal
                                     \, conc)> decl,
                         <if is-ctx
                           then <to-tuple; Fst; singelton> decl
                           else ![]
                           end> )\
    get-judgment-types(is-ctx, type-check | judgment) = failed(|[judgment])

    /**
     * Extracts the typing judgment.
     *
     * @type ErrorTypingJudgment -> TypingJudgment
     */
    get-typing-judgment = proj(ErrorTypingJudgment|1)
    get-typing-judgment = failed

    /**
     * Extracts the error message.
     *
     * @type ErrorTypingJudgment -> List(MessagePart)
     */
    get-error-message = proj(ErrorTypingJudgment|2)
    get-error-message = failed

    /**
     * Extacts all consituents from the given term that are marked
     * as inputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-inputs(|declarations) = filter-hole-positions(?(_, "I") | declarations)
    get-inputs(|declarations) = failed(|[declarations])

    /**
     * Extacts all consituents from the given term that are marked
     * as outputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-outputs(|declarations) = filter-hole-positions(?(_, "O") | declarations)
    get-outputs(|declarations) = failed(|declarations)

    /**
     * Extracts all consituents from a given term that satisfy the given
     * condition `cond`.
     *
     * @param cond - an arbitrary strategy
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    filter-hole-positions(cond | declarations) : node -> consituents
        where
            args := <get-arguments> node;
            positions := <get-hole-positions(|declarations); filter(cond); map(Fst)> node;
            consituents := <map(\n -> <index(|n)> args\)> positions
    filter-hole-positions(cond | declarations) = failed(|[declarations])

    /**
     * Fetches the declaration for the given node and provides a list of
     * holes together with their positions.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-hole-positions(|declarations) : node -> <add-indices> holes
        where
            declaration-number := <get-judgment-id> node;
            declaration := <index(|declaration-number)> declarations;
            holes := <collect-all(?Hole(_,_), conc); map(proj(Hole|2))> declaration
    get-hole-positions(|declarations) = failed(|[declarations])

    /**
     * Computes the types of the passed meta-variables according to the surrounding
     * constructor and the scope of the meta-variable.
     *
     * @param target language
     * @param constructor that surrounds the variables
     * @param number of arguments of the constructor
     * @type List(MetaVariable) -> List(String)
     */
    compute-types(disambiguate | language, cons, arg-count) : [] -> []
    compute-types(disambiguate | language, cons, arg-count) : vars -> vars-types
        where
              productions := <get-productions-for-constructor(|language)> cons;
              productions' := <filter(to-tuple; Fst; filter(?sort(_)))> productions;
              matching-productions := <filter(where(length; equal(|arg-count)))>;
              transposed-matching-productions := <matrix-transpose> matching-productions;
              vars-types := <zip; disambiguate> (vars, transposed-matching-productions)
    compute-types(disambigutate | language, cons, arg-count) = failed(|[language, cons, arg-count])