module generate

imports
    libstratego-gpp
    libstratego-aterm
    lib/editor-common.generated
    lib/runtime/index/core
    lib/runtime/task/core
    include/SLTC
    trans/generate-templates
    trans/generate-constraints
    trans/generate-sdf
    trans/generate-fof
    trans/optimize-constraint-templates
    trans/typecheck
    trans/verification
    trans/module-utils
    trans/tests

rules
    
  generate-sdf :
       (selected, position, ast, path, project-path) -> (filename, result)
  with
    index-setup(|<language>, project-path);
    task-setup(|project-path);
    filename := "syntax/Generated.sdf";
    aterm := <toSdf> selected;
    result := <pp-sdf> aterm
    
  pp-sdf =
    ast2abox(|[<parse-pptable-file> "lib/org/sugarj/languages/Sdf2.pp"]);
    box2text-string(|100)


  generate-fof :
       (selected, position, ast, path, project-path) -> (filename, result)
  where
    index-setup(|<language>, project-path);
    task-setup(|project-path);
    filename := <guarantee-extension(|"fof")> path;
    aterm := <toFOF> selected;
    result := <pp-fof> aterm
    
  pp-fof =
    ast2abox(|[<parse-pptable-file> "trans/fof.pp"]);
    box2text-string(|100)
    
  typecheck :
    (selected, position, ast, path, project-path) -> (filename, <resolve-imports; typecheck-editor> ast)
  where
    index-setup(|<language>, project-path);
    task-setup(|project-path);
    filename := <guarantee-extension(|"check")> path

  generate-constraints :
    (selected, position, ast, path, project-path) -> (filename, <resolve-imports; generate-constraints> ast)
  where
    index-setup(|<language>, project-path);
    task-setup(|project-path);
    filename := <guarantee-extension(|"constraints")> path

  generate-templates-editor :
    (selected, position, ast, path, project-path) -> (filename, <resolve-imports; generate-templates> ast)
  where
    index-setup(|<language>, project-path);
    task-setup(|project-path);
    filename := <guarantee-extension(|"templates")> path

  generate-files(|base) =
    ?files;
    names := <generate-file-names(|base)> files;
    <zip> (names, files);
    map(write-file);
    !names

  generate-file-names(|base) = generate-file-names(|base, 0)
  generate-file-names(|base, i) : [] -> []
  generate-file-names(|base, i) : [output | rest] -> [outfile | <generate-file-names(|base, <inc> i)> rest]
  where
    <get-extension> base => ext;
    <remove-extension> base => basename;
    <conc-strings> (basename, "-", <int-to-string> i) => filename;
    <add-extension> (filename, ext) => outfile
  
  write-file : (file, output) -> <id>
  where
    <fopen> (file, "w") => stream;
    <fputs> (output, stream);
    <fclose> stream
    
  error(s) = debug(s);fail
  pp-debug(pp) = bottomup(is-string <+ is-list <+ pp <+ debug(!"pp failed: "))

    