module optimize-constraint-templates

imports utils
imports constraint-language
imports constraint-template-language
imports constraint-utils
imports fof-language
imports generate-fof
imports verification
imports sdf-utils
imports org/sugarj/languages/Sdf2

imports include/SLTC

signature
    sorts DummyVar
    constructors
        DummyVar__ : DummyVar

rules
    
    /**
     * Main strategy that optimizes which-ambiguities.
     * @param context definitions of the specification 
     * @type List(Template) -> List(Template)
     */
    solve-which-ambiguities(do-induction | judgments, context-definitions, language) : templates ->
        <conc> (<map(mkFork;
                optimize-fork(do-induction | judgments, context-definitions, templates, language)
                ); remove-trivial-forks> equivalence-classes,
                <diff(eq)> (templates, <flatten-list> equivalence-classes))
        where equivalence-classes := <group(equal-mod-var); filter(where(or(length; gt(|1), some(?Fork__(_)))))> templates
    solve-which-ambiguities(|judgments, context-definitions) =
        failed(|[judgments, context-definitions])
    
    /**
     * Extracts the pattern from the rules and compares the results modulo
     * variable names.
     *
     * @param a - Rule
     * @type Rule -> Rule
     */
    equal-mod-var =
        ?(a, b);
        where(equal(|<Trpl; (get-pattern, get-ctx-pattern, get-conclusion-judgment-number); make-dummy-vars> a,
                     <Trpl; (get-pattern, get-ctx-pattern, get-conclusion-judgment-number); make-dummy-vars> b))
    
    /**
     * Replaces all occurences of Var(_) with DummyVar(). This strategy
     * is used to implement equal-mod-var.
     * 
     * @internal
     * @type a -> a
     */
    make-dummy-vars = innermost(?Var__(_); !DummyVar__())
    make-dummy-vars = failed

    /**
     * Checks whether a template in a Fork is redundant. Only applicable to Forks in which
     * all templates have patterns that are equal modulo variable names.
     *
     * Checks for each template if all premisses are implied by the premisses of a singel other
     * template. If this is the case the template is removed.
     *
     * @type Fork__(Template) -> Fork__(Template)
     */
    optimize-fork(do-induction | judgments, context-definitions, templates, language) : Fork__(ts) -> Fork__(ts'')
        where ts' := <make-conclusions-equal(newnames(|"Z"); map(makeVar))> ts;
              ts'' := <zip; remove-all(is-subsumed(do-induction | judgments, context-definitions, templates, language, ts')); map(Fst)> (ts, ts')

    /**
     * Renames variables uniformly in structurally equal rules.
     *
     * @strategy that creates the new variables
     * @type List(Template) -> List(Template)
     */
    make-conclusions-equal(wrap) =
        ?templates;
        vars := <Hd; get-pattern; collect-om(?Var__(_)); length; wrap> templates;
        <map(\rule -> <zip; replace-all(|rule)> (<get-pattern; collect-om(?Var__(_))> rule, vars)\); nub> templates
    make-conclusions-equal(wrap) = failed

    is-subsumed(do-induction | judgments, context-definitions, templates, language, ambiguous-templates) =
        ?(rule, rule');
        templates-without-rule := <diff> (templates, [rule]);
        premisses := <diff; map(premisses-to-props)> (ambiguous-templates, [rule']);
        rule-premisses := <premisses-to-props> rule';
        goals := <map(\ps -> Formula__("subsumption", Impl__(And__(rule-premisses), And__(ps)))\)> premisses;
        ((<direct-proof(|<get-template-name> rule, templates-without-rule, context-definitions);
          some(?VerificationSuccess(_))> goals) <+ if(do-induction,
        (all-vars-types := <diff; map(get-premisses; map(Fst)); map(conc(|<get-premisses; map(Fst)> rule'); mapconcat(collect-variables-with-types(|language, judgments)))> (ambiguous-templates, [rule']);
         <zip; map(\(vars-types, goal) -> <proof-by-induction(|Some("subsumption-by-induction"), templates, context-definitions, language, vars-types)> goal\)> (all-vars-types, goals))))

    /**
     * Main strategy that optimizes when-ambiguities.
     *
     * @param judgments of the specification
     * @param target-language of the specification
     * @param context definitions of the specification
     * @type List(Template) -> List(Template)
     */
    solve-when-ambiguities(|judgments, target-language, context-definitions) =
        ?templates;
        where(equivalence-classes := <create-classes> templates);
        <conc> (<map(mkFork; optimize-relation(|judgments, context-definitions, target-language));
                 remove-trivial-forks> equivalence-classes,
                <diff(eq)> (templates, <flatten-list> equivalence-classes))
    solve-when-ambiguities(|judgments, target-language, context-definitions) =
        failed(|[judgments, target-language, context-definitions])

    /**
     * Optimize relations. A relation is a set of templates that define
     * a judgment with only input positions.
     *
     * FXIME: Take care of contexts.
     */
    optimize-relation(|judgments, context-definitions, target-language) =
        is-relation; where(get-non-syntax-directed-templates; not(equal(|[])));
        where(get-ctx-pattern; equal(|[]))
        < optimize-relation'(|judgments, context-definitions, target-language) + id
    optimize-relation(|judgments, context-definitions, target-language) =
        failed(|[judgments, context-definitions, target-language])

    optimize-relation'(|judgments, context-definitions, target-language) :
        f@Fork__(ts) -> Fork__(ts')
        where non-syntax-directed-ts := <get-non-syntax-directed-templates> f;
              judgment-number := <Hd; get-conclusion-judgment-number> non-syntax-directed-ts;
              non-terminals := <get-judgment-types(fail|judgment-number)> judgments;
              substructures := <map(get-immediate-substructures(|target-language))> non-terminals;
              ts' := <foldl(derive-syntax-directed-rules(|substructures, context-definitions))
                      ;solve-which-ambiguities(id | judgments, context-definitions, target-language)
                      > (non-syntax-directed-ts, ts)
              
              // base-constructors := <map(filter(where(get-arguments; equal(|[]))))> substructures;
              // base-cons-product := <cartesian-product> base-constructors;
              // pos-base-goals := <map(\args -> Formula__("", Pred__(<conc-strings> ("tcheck", <int-to-string> judgment-number), args))\)> base-cons-product;
              // neg-base-goals := <map(\args -> Formula__("", Not__(Pred__(<conc-strings> ("tcheck", <int-to-string> judgment-number), args)))\)> base-cons-product;
              // pos-proofs := <fof-from-templates(|context-definitions, ts); verify-vampire(|"2", "pos-base-goal")> pos-base-goals;
              // neg-proofs := <fof-from-templates(|context-definitions, ts); verify-vampire(|"2", "neg-base-goal")> neg-base-goals;
              // proofs := <zip> (pos-proofs, neg-proofs);
              // <not(some((?VerificationFailure(_), ?VerificationFailure(_))))> proofs;
              // base-templates := <zip; filter(\(goal, (VerificationSuccess(_),_)) -> <make-base-template> (judgment-number, goal)\)> (base-cons-product, proofs)

    /**
     * Unfolds non-syntax directed rules.
     *
     * @param substructures of the variables in the conclusion
     * @param context declarations
     * @type (Rule, List(Template)) -> List(Template)
     */
    derive-syntax-directed-rules(|substructures, context-definitions) =
        ?(property, templates);
        substructures-with-vars := <collect-om(?sort(_), conc); Dupl;
                                             (id, length; newnames(|"Z"); map(makeVar));
                                             zip; replace-once(|substructures)> substructures;
        instances := <cartesian-product; map(zip(|<get-pattern> property); replace-all(|property))> substructures-with-vars;
        !<conc> (<diff> (templates, [property]), instances)
    derive-syntax-directed-rules(|substructures, context-definitions) =
        failed(|[substructures, context-definitions])

    /**
     * Helper strategy. Allows to lift strategies to handle Forks.
     *
     * @param the strategy that shall be lifted
     * @type List(Template) -> List(Template)
     */
    apply-to-each-template(s) =
        ?templates;
        <partition(?Fork__(_), not(?Fork__(_)));
        (map(\Fork__(ts) -> Fork__(<s> ts)\), s); conc> templates

    /**
     * Removes all templates that have an unsatisfiable premise
     *
     * @param context declarations
     * @type List(Template) -> List(Template)
     */
    remove-unsatisfiable-templates(|context-definitions) =
        ?templates;
        apply-to-each-template(remove-unsatisfiable-templates(|context-definitions, templates))
    remove-unsatisfiable-templates(|context-definitions) = failed(|[context-definitions])

    /**
     * Removes all templates that have an unsatisfiable premise.
     * Note: This variant can only applied to list of templates without forks.
     * To use in the presence of Forks wrap it with `apply-to-each-template`.
     *
     * @param context declarations
     * @param templates used to proof unsatisfiability
     * @type List(Template) -> List(Template)
     */
    remove-unsatisfiable-templates(|context-definitions, templates) =
        remove-all(where(premisses-to-props; where(not(equal(|[])));
                   map(\p -> Formula__("unsatisfiable-premise", Not__(p))\);
                   direct-proof(|Some("neg-premise"), templates, context-definitions); all(?VerificationSuccess(_))
                   ))
    remove-unsatisfiable-templates(|context-definitions, templates) =
        failed(|[context-definitions, templates])

    /**
     * Removes valid premisses from all given templates.
     *
     * @param context declarations
     * @type List(Template) -> List(Template)
     */
    remove-valid-premisses(|context-definitions) =
        ?templates;
        <apply-to-each-template(map(remove-valid-premisses(|context-definitions, templates)))> templates
    remove-valid-premisses(|context-definitions) = failed(|[context-definitions])

    /**
     * Removes valid premisses from the given template.
     *
     * @param context declarations
     * @param templates used to proof validity
     * @type Template -> Template
     */
    remove-valid-premisses(|context-definitions, templates) =
        ?template;
        indices := <premisses-to-props; map(\p -> Formula__("valid-premise", p)\);
                    direct-proof(|Some("valid-premise"), templates, context-definitions);
                    add-indices; remove-all(Snd;?VerificationSuccess(_)); map(Fst)> template;
        premisses := <get-premisses> template;
        <set-premisses(|<map(\i -> <index(|i)> premisses\)> indices)> template
    remove-valid-premisses(|context-definitions, templates) = failed(|[context-definitions, templates])
        
    /**
     * Attempts a direct proofs of the given propositions
     * given the template and context definitions.
     *
     * @param name of the goal
     * @param templates
     * @param context definitions
     * @type List(Formula) -> List(VerificationResult)
     */
    direct-proof(|name, templates, context-definitions) =
        direct-proof(|"2", name, templates, context-definitions)
    direct-proof(|timeout, name, templates, context-definitions) =
        fof-from-templates(|context-definitions, templates);
        verify-vampire(|timeout, <option-to-string-newname(|"Goal")> name)
    direct-proof(|timeout, name, templates, context-definitions) =
        failed(|[timeout, name, templates, context-definitions])

    /**
     * Attempts a proof by induction of the given proposition given
     * the template and context declarations and variable types.
     * Succeeds if the proposition could be proven, fails otherwise.
     *
     * @param name of the goal
     * @param template declarations
     * @param context declarations
     * @param name of the target language
     * @param types of the variables occruing in the proposition
     */
    proof-by-induction(|name, templates, context-definitions, language, vars-types) =
        proof-by-induction(|"2", name, templates, context-definitions, language, vars-types)
    proof-by-induction(|timeout, name, templates, context-definitions, language, vars-types) =
        ?proposition;
        (vars, types) := <unzip> vars-types;
        substructures := <map(mapconcat(get-immediate-substructures(|language)))> types;
        instances := <cartesian-product> substructures;
        vars-instances := <map(zip(|vars)); nub> instances;
        vars-instances-with-const := <map(introduce-constants)> vars-instances;
        goals := <map(Dupl; (id, replace-all(|proposition)))
                 ;foldr(![], union((Snd, Snd); eq), ![<id>])
                 ;map((compute-const-types(|language), id))
                 > vars-instances-with-const;
        ihs-goals := <map(\(const-type, goal) -> (<make-induction-hypothesis(|vars, types, const-type, goal)> proposition, goal)\)> goals;
        <map(\(ihs, goal) ->
                <fof-from-templates(|context-definitions, <conc> (ihs, templates));
                 verify-vampire(|timeout, <option-to-string-newname(|"Goal")> name);
                 all(?VerificationSuccess(_))> [goal]\)> ihs-goals

    /**
     * Replaces sort()'s with fresh constants
     *
     * @type List(Var, ATerm) -> List(Var, ATerm)
     */
    introduce-constants =
        ?var-structure;
        collect-om(?sort(_), conc);
        Dupl;
        {| Fresh: where(<reset-fresh> "c"); (id, length; newnames(|"c"); map(make-const)) |};
        zip; replace-once(|var-structure)

    /**
     * Computes the types of the substructures.
     *
     * @param name of the target langugage
     * @type List((Var, ATerm)) -> List(ATerm, ATerm)
     */
    compute-const-types(|language) =
        map(Snd; Dupl; (id, \cons#(args) ->
            <filter(?Const__(_));
            // FIXME: Ambiguities are not resolved!
            compute-types(map(Snd; Hd; ?sort(<id>))
                         | language
                         , cons
                         , <length> args)> args
        \))

    /**
     * Creates the induction hypothesis for passed proposition.
     *
     * @param variables occuring in the proposition
     * @param types of the variables in the proposition
     * @param substructurs with coresponding type
     * @param goal to be proved
     */
    make-induction-hypothesis(|vars, types, term-type, goal) =
        ?proposition;
        const-type := <map((collect(?Const__(_)), id))> term-type;
        possible-confs := <zip; map(\([t], ct) -> <zip; filter(where(Snd;equal(|t))); unzip; Fst> ct\); cartesian-product> (types, const-type);
        <map(\conf -> <zip; replace-once(|proposition)> (vars, conf)\)> possible-confs
    make-induction-hypothesis(|vars, types, const-type, goal) = ![]

    /**
     * Collects all variables of the passed node and returns them
     * with their associated types.
     *
     * @param the name of the target language
     * @param judgment declarations
     * @type ATerm -> List(Var, ATerm) 
     */
    collect-variables-with-types(|language, judgments) : cons#([]) -> []
    collect-variables-with-types(|language, judgments) : node ->
        <zip; mapconcat((?Var__(_), id) < singelton
                                        + collect-variables-with-types(|language, judgments))> (terms, types)
        where <is-premise> node;
              num := <get-judgment-number> node;
              input-types := <get-judgment-types(fail, "I" | num)> judgments;
              output-types := <get-judgment-types(fail, "O" | num)> judgments;
              types := <conc; map(singelton)> (input-types, output-types);
              terms := <conc> (<get-premise-inputs> node, <get-premise-outputs> node)
    collect-variables-with-types(|language, judgments) : cons#(args) ->
        <conc> (<compute-types(map((id, map(?sort(<id>)))) | language, cons, arg-count )> vars,
                <mapconcat(collect-variables-with-types(|language, judgments))> rest)
        where arg-count := <length> args;
              (vars, rest) := <partition(?Var__(_), not(?Var__(_)))> args
    collect-variables-with-types(|language, judgments) = failed(|[language, judgments])

    /**
     * The templates within a fork define a relation if they have no output positions.
     * Strategy succeeds if the templates define a relation and fails otherwise.
     */
    is-relation : Fork__([t|ts]) -> Fork__([t|ts])
        where <get-outputs; option(equal(|[]))> t

    /**
     * Returns all templates of a fork that contain only variables in their conclusion.
     *
     * @type Fork(List(Template)) -> List(Template)
     */
    get-non-syntax-directed-templates : Fork__(ts) -> <filter(where(get-pattern; all(?Var__(_))))> ts
    get-non-syntax-directed-templates = failed

    /**
     * Strategy that groups all templates that are when-ambiguous to each other.
     *
     * @type List(Template) -> List(List(Template))
     */
    create-classes : [] -> []
    create-classes : [t | ts] -> [class | <create-classes> ts']
        where class := <create-class; nub> (t, ts);
              ts' := <diff> (ts, class)
    create-classes = failed

    /**
     * Strategy that selects all templates `ts' that are when-ambigous
     * to the template `t'. 
     *
     * @type (Template, List(Template)) -> List(List(Template))
     */
    create-class =
        ?(t, ts);
        where(subsumed := <filter(where(\t' -> <subsume-mod-var(true)> (t, t')\))> ts;
              ts' := <diff> (ts, subsumed));
        if <equal> (ts, ts')
        then ![t]
        else <conc> ([t | subsumed], <mapconcat(\t' -> <create-class> (t', ts')\)> subsumed)
        end
    create-class = failed

    /**
     *  Strategy succeeds if template t1 and t2 are chosen such that
     *
     *      m(t1) \subseteq m(t2)
     *
     * where m(t) computes the set of terms that match the conclusion of t and such
     * that the judgment numbers are equal. If the strategy `sym' succeeds the strategy
     * also succeeds if
     *
     *      m(t2) \subseteq m(t1)
     *
     * @param strategy that succeeds when the comparison should be symmetric and fails otherwise
     */
    subsume-mod-var(sym) =
        ?(a, b);
        where(equal(|<get-conclusion-judgment-number> a, <get-conclusion-judgment-number> b));
        where(<zip; map(match-constructors(?Ctx__(_) <+ ?DummyVar__(), sym))> (<make-dummy-vars; get-ctx-pattern> a, <make-dummy-vars; get-ctx-pattern> b));
        where(<zip; map(match-constructors(?DummyVar__(), sym))> (<make-dummy-vars;get-pattern> a, <make-dummy-vars; get-pattern> b))

    /**
     * Sorts all templates within forks according to subsume-mod-var(false).
     *
     * @type List(Template) -> List(Template)
     */
    order-forks-by-subsumption = map(try(\Fork__(ts) -> Fork__(<qsort(subsume-mod-var(false))> ts)\))
    order-forks-by-subsumption = failed

    /**
     * Extract templates from forks.
     * @type List(Template) -> List(Template)
     */
    remove-forks : [Fork__(ts) | ts'] -> <conc> (ts, <remove-forks> ts')
    remove-forks : [t | ts] ->  [t | <remove-forks> ts]
    remove-forks : [] -> []
    remove-forks = failed

    /**
     * Unpacks a Fork if it only contains a single template.
     */
    remove-trivial-forks = filter(?Template__(_,_,_) <+
                                  \Fork__(ts) ->
                                    <switch <length> ts
                                     case 0: fail
                                     case 1: <Hd> ts
                                     otherwise: !Fork__(ts)
                                     end>
                                   \)
    remove-trivial-forks = failed

    /**
     * Main strategy that composes all optimizations.
     *
     * @param judgments of the specification
     * @param target-language of the specification
     * @param context definitions of the specification 
     * @type List(Template) -> List(Template)
     */
    optimize-templates(|target-language, context-definitions) =
        ?(templates, judgments);
        {|Fresh:
        <solve-which-ambiguities(fail | judgments, context-definitions, target-language);
        solve-when-ambiguities(|judgments, target-language, context-definitions);
        remove-unsatisfiable-templates(|context-definitions);
        remove-valid-premisses(|context-definitions);
        order-forks-by-subsumption> templates |}
    optimize-templates(|target-language, context-definitions) = 
        failed(|[target-language, context-definitions])