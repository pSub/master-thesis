module optimize-constraint-templates

imports utils
imports constraint-language
imports constraint-template-language
imports constraint-utils

// FIXME: This is only a temporary import for testing
imports generate-constraint-generator

signature
    sorts DummyVar
    constructors
        DummyVar__ : DummyVar

rules
    
    // FIXME: Currently there is no distinction between which and when ambiguities!
    solve-which-ambiguities : templates -> <conc>(<map(mkFork; optimize-fork)> equality-classes,
                                                  <diff(eq)> (templates,
                                                              <flatten-list> equality-classes))
        where equality-classes :=  <group-by-conclusion> templates
    
    /**
     * Collects all rules that have an equal pattern (modulo variable names).
     *
     * @type List(Rule) -> List(List(Rule))
     */
    group-by-conclusion : [] -> []
    group-by-conclusion : [r | rs] -> <if <equal(|[])> equality-class
                                       then <group-by-conclusion> rs
                                       else <MkCons> ([r | equality-class], <group-by-conclusion> rs)
                                       end>
        where equality-class := <filter(where(equal-mod-var(|r)))> rs
    
    /**
     * Extracts the pattern from the rules and compares the results modulo
     * variable names.
     *
     * @param a - Rule
     * @type Rule -> Rule
     */
    equal-mod-var(|a) = where(Dupl; (get-pattern, get-ctx-pattern); make-dummy-vars;
                              equal(|<Dupl; (get-pattern, get-ctx-pattern); make-dummy-vars> a))
    
    /**
     * Replaces all occurences of Var(_) with DummyVar(). This strategy
     * is used to implement equal-mod-var.
     * 
     * @internal
     * @type a -> a
     */
    make-dummy-vars = innermost(?Var__(_); !DummyVar__())

    /**
     * Stub for checking whether a rule within a Fork is redundant.
     */
    optimize-fork : Fork__(rulez) -> Fork__(rulez')
        where vars := <Hd; get-pattern; collect-om(?Var__(_))> rulez;
              // Make the conclusions of the rules equal.
              rulez' := [<Hd> rulez | <Tl; map(\rule -> <zip; replace-all(|rule)> (<get-pattern; collect-om(?Var__(_))> rule, vars)\)> rulez]
    
    optimize-templates = make-constraint-generator; solve-which-ambiguities