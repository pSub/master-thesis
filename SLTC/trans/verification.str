module verification

imports
  libstratego-gpp
  libstratego-aterm
  include/SLTC
  generate
  names
  generate-fof
  sltc
  lib/editor-common.generated
  runtime/analysis/core
  lib/runtime/index/core
  lib/runtime/task/core

signature constructors
    VerificationSuccess : List(Lemmas) -> Result
    VerificationFailure : String -> Result

rules
    CurrentFileFOF = CurrentFile; guarantee-extension(|"fof")
    
    constraint-warning :
        Module(m,_,_,_,_,_,_,Some(body)) -> <conc> (consistency-msgs, goal-msgs)
    where
        msg := $[Verification result outdated or not started yet, use verification menu to re-verify.];
        consistency-msg := $[Consistency check outdated or not started yet, use verification menu to re-check.];
        rulez := <collect-all(?Conjectures(<filter(?TypingRule(_,RuleName(_,<id>),_))>)); concat> body;
        outfiles := <generate-file-names(|<CurrentFileFOF>)> rulez;
        results := <map(get-verification-result-info <+ !())> outfiles;
        filtered-results := <zip; filter(?(_,()))> (rulez, results);
        goal-msgs := <map(\(r,_) -> (r,msg)\)> filtered-results;
        consistency-results := <CurrentFileFOF; consistency-filename; (![<get-verification-result-info>] <+ ![()])>;
        consistency-msgs := <filter(\() -> (m, consistency-msg)\)> consistency-results
    
    constraint-note :
        Module(m,_,_,_,_,_,_,Some(body)) -> <conc> (consistency-msgs, goal-msgs)
    where
        rulez := <collect-all(?Conjectures(<filter(?TypingRule(_,RuleName(_,<id>),_))>)); concat> body;
        outfiles := <generate-file-names(|<CurrentFileFOF>)> rulez;
        results := <map(get-verification-result-info <+ !())> outfiles;
        filtered-results := <zip; filter(?(_,VerificationSuccess(_)))> (rulez, results);
        goal-msgs := <map(\(r,res) -> (r,<verification-success-msg> res)\)> filtered-results;
        consistency-results := <CurrentFileFOF; consistency-filename; (![<get-verification-result-info>] <+ ![])>;
        consistency-msgs := <filter(\r -> (m, <consistency-success-msg> r)\)> consistency-results
    
    
    verification-success-msg : 
        VerificationSuccess(lemmas) -> 
        $[Verification succeeded, used lemmas: [<separate-by(|", "); concat-strings> lemmas].]
    
    consistency-success-msg : 
        VerificationFailure(errmsg) -> 
        $[Failed to show inconsistency: [errmsg].]
    
    
    constraint-error : 
        Module(m,_,_,_,_,_,_, Some(body)) -> <conc> (consistency-msgs, goal-msgs)
    where
        rulez := <collect-all(?Conjectures(<filter(?TypingRule(_,RuleName(_,<id>),_))>)); concat> body;
        outfiles := <generate-file-names(|<CurrentFileFOF>)> rulez;
        results := <map(get-verification-result-info <+ !())> outfiles;
        filtered-results := <zip; filter(?(_,VerificationFailure(_)))> (rulez, results);
        goal-msgs := <map(\(r,res) -> (r,<verification-failure-msg> res)\)> filtered-results;
        consistency-results := <CurrentFileFOF; consistency-filename; (![<get-verification-result-info>] <+ ![])>;
        consistency-msgs := <filter(\r -> (m, <consistency-failure-msg> r)\)> consistency-results

    verification-failure-msg : 
        VerificationFailure(errmsg) -> $[Verification failed: [errmsg].]
        
    consistency-failure-msg : 
        VerificationSuccess(lemmas) -> 
        $[Found inconsistency using lemmas: [<separate-by(|", "); concat-strings> lemmas].]
    

rules
    clean-proofs : (selected, position, ast, path, project-path) -> None()
    where
        index-setup(|<language>, project-path);
        task-setup(|project-path);
        filename := <guarantee-extension(|"fof")> path;
        rulez := <collect-all(?Conjectures(<filter(?TypingRule(_,RuleName(_,<id>),_) )>)); concat> ast;
        outfiles := <generate-file-names(|filename)> rulez;
        <map(clean-proof)> outfiles;
        <consistency-filename; clean-proof> path;
        <queue-analysis> path
    
    clean-proof =
        ?file;
        fof-file := <guarantee-extension(|"fof")> file;
        hash-file := <guarantee-extension(|"hash")> file;
        info-file := <guarantee-extension(|"info")> file;
        proof-file := <guarantee-extension(|"proof")> file;
        <try(remove-file)> fof-file;
        <try(remove-file)> hash-file;
        <try(remove-file)> info-file;
        <try(remove-file)> proof-file

rules
    check-consitency-vampire = check-consitency-vampire(|"5")
    check-consitency-vampire-60 = check-consitency-vampire(|"60")
    check-consitency-vampire-120 = check-consitency-vampire(|"120")
    check-consitency-vampire-600 = check-consitency-vampire(|"600")
    
    check-consitency-vampire(|time) :
        (selected, position, ast, path, project-path) -> None()
    where
        index-setup(|<language>, project-path);
        task-setup(|project-path);
        filename := <consistency-filename> path;
        false-goal := Conjectures([TypingRule(PremiseBase(), RuleName("", Some("FALSE")), <mkterm> ("TypingJudgment-False", []))]);
        ast-with-false := <Module(id, id, id, id, id, id, id, !Some(false-goal))> ast;
        
        [goal] := <toFOF <+ error(!"fof-trans failed: ")> ast-with-false;
        string := <pp-fof <+ pp-debug(pp-fof)> goal;
        <write-file> (filename, string);
        <try(call-vampire(|"FALSE",time))> filename;
        <queue-analysis> path
        
    consistency-filename = remove-extension; <conc-strings> (<id>, "-consistency.fof")  

rules
    verify-vampire = verify-vampire(|"10")
    verify-vampire-60 = verify-vampire(|"60")
    verify-vampire-120 = verify-vampire(|"120")
    verify-vampire-600 = verify-vampire(|"600")
    
    verify-vampire(|time) :
        input@(selected, position, ast, path, project-path) -> None()
    where
        index-setup(|<language>, project-path);
        task-setup(|project-path);
        filename := <guarantee-extension(|"fof")> path;
        rulez := <collect-all(?Conjectures(<filter(?TypingRule(_,RuleName(_,<id>),_))>)); concat> ast;
        goals := <toFOF <+ error(!"fof-trans failed: ")> ast;
        strings := <map(pp-fof <+ pp-debug(pp-fof))> goals;
        outfiles := <generate-files(|filename)> strings;
        <zip; map(\(r,f) -> <try(call-vampire(|r,time))> f\)> (rulez, outfiles) < 
        <queue-analysis> path + <debug> "No conjectures, vampire is not called"

    verify-vampire(|time, name) : ast -> <zip; map(\(r,f) -> <try(call-vampire(|r,time))> f\)> (rulez, outfiles)
        where
            // FIXME: Place those files into the project folder.
            filename := <conc-strings; guarantee-extension(|"fof")> ("/tmp/proofs/", name);
            rulez := <collect-all(?Formula__(_,Conjecture__(),_))> ast;
            strings := <map(pp-fof <+ pp-debug(pp-fof))> ast;
            outfiles := <generate-files(|filename)> strings

    // call-and-handle = call < debug(!"Command succeeded: ") + debug(!"Command failed: ")

    call-vampire(|rule,time) = 
        ?file;
        proof-file := <guarantee-extension(|"proof")> file;
        if <not-up-to-date> file => (hash-file, new-hash)
        then <write-file> (hash-file, new-hash);
             Stream(ins) := <stdin-stream>;
             Stream(out) := <fopen> (proof-file, "w");
             Stream(err) := <stderr-stream>;
             finally(
                <call> (<vampire-command>, <conc>(<vampire-options(|time)>, [file]), ins, out, err),
                <fclose> out
                );
                <extract-vampire-info(|rule)> proof-file
        else <extract-vampire-info(|rule)> proof-file
        end
    
    not-up-to-date = 
        ?file;
        proof-file := <guarantee-extension(|"proof")> file;
        hash-file := <guarantee-extension(|"hash")> file;
        new-hash := <compute-hash> file;
        (  <not(file-exists)> proof-file 
        <+ <not(file-exists)> hash-file
        <+ old-hash := <read-text-file <+ !""> hash-file;
           <not(equal)> (new-hash, old-hash)
        );
        !(hash-file, new-hash)
        
        
    extract-vampire-info(|r) =
        ?proof-file;
        proof := <read-text-file> proof-file;
        lines := <get-lines; reverse; ?[_,last,butlast|_]; reverse> proof;
        lemma-lines := <filter(string-starts-with(|"  file("))> lines;
        axioms := <map(extract-tptp-lemma-name-from-line)> lemma-lines;
        lemmas := <diff> (axioms, [<strip-annos> r]);
        info-file := <guarantee-extension(|"info")> proof-file;
        result := <is-substring(!"Success") <
                    !VerificationSuccess(lemmas) + 
                    !VerificationFailure(butlast)> last;
        <write-file> (info-file, <write-to-string> result);
        !result
    
    get-verification-result-info =
        ?file;
        not(not-up-to-date);
        info-file := <guarantee-extension(|"info")> file;
        <read-text-file; read-from-string> info-file
        
    
    extract-tptp-lemma-name-from-line =
        ?line;
        <split-after; Snd> (line, ",");
        <split-before; Fst> (<id>, ")");
        try(unquote(?'\''))

    compute-hash =
        ?file;
        <not(file-exists)> file;
        !0
    compute-hash =
        ?file;
        (tmp,_) := <new-temp-file>;
        <call> (<hash-command>, <conc> (<hash-options(|tmp)>, [file]));
        <read-text-file> tmp

    
    vampire-command = !"vampire"
    vampire-options(|time) =
        !["-t", time, 
          "--mode", "casc",
          "--proof", "tptp",
          "--output_axiom_names", "on"]

    hash-command = !"openssl"
    hash-options(|out) = 
        !["md5", "-out", out]