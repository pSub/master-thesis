module store-utils

imports utils
imports constraint-template-language

rules

    /**
     * Updates the store `s` with the provided context bindings. Context
     * bindings are a list of triples containing the context id, inputs 
     * and outputs. 
     *
     * @param s - a hashtable containing hashtables
     */
    update-store(|s) = foldr(!s, \((ctx, i, o), s') ->
                                    <hashtable-put(|ctx,
                                                    <hashtable-get(|ctx);
                                                    (\xs -> [i|xs]\, hashtable-put(|i, o))> s')> s'
                                 \ <+
                                 \(Reset__(ctx), s') ->
                                    <clear-context(|s', ctx)> s'
                                 \)

    /**
     * Looks up the context `ctx` at `key`.
     *
     * @param s - a hashtable containing hashtables
     */
    lookup(|s) : (ctx, key) -> <hashtable-get(|ctx); Snd; hashtable-get(|key)> s

    /**
     * Removes and returns the first element from the hashmap.
     */
    pop(|s) : ctx -> <hashtable-get(|ctx);
                     \ ([x | xs], context) ->
                        <!(x, <lookup(|s)> (ctx, x));
                        where(<hashtable-put(|ctx, (xs, <hashtable-remove(|x)> context))> s) >
                     \> s

    /**
     * Clears all contexts in the store.
     *
     * @param store - a hashtable containing hashtables
     */
    clear-store(|store) = where(<hashtable-getlist; map(\(k, (s, c)) ->
                                                            <<hashtable-clear> c;
                                                            <hashtable-put(|k, ([], c))> store>
                                                        \)> store)

    /**
     * Removes all elements from the given context in the `store'.
     */
    clear-context(|store, ctx) = where(<hashtable-get(|ctx)> store;
                                       \(s, c) ->
                                            <<hashtable-clear> c;
                                             <hashtable-put(|ctx, ([], c))> store>
                                       \)

    /**
     * Destroys the store and all containing Hashtables for contexts.
     *
     * @param store - a hashtable containing hashtables
     */
    destroy-store(|store) = where(<hashtable-values; map((id, hashtable-destroy))> store; <hashtable-destroy> store)