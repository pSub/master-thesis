module generate-templates

imports constraint-language
imports constraint-template-language
imports utils
imports include/SLTC
imports lib/editor-common.generated

imports optimize-constraint-templates
       
rules
    
    wrapped-generate-templates = io-wrap(generate-templates)

    generate-templates :
        Module(ModuleDec(_),
               imports,
               Language(target-language),
               MetaVariables(meta-variables),
               Contexts(context-definitions),
               Judgments(judgments),
               Rules(typing-rules),
               conjectures)
        -> <to-templates(|judgments, context-definitions);
            optimize-templates(|judgments, target-language, context-definitions)> typing-rules

    /**
     * Extracts the typing judgment.
     *
     * @type ErrorTypingJudgment -> TypingJudgment
     */
    get-typing-judgment = proj(ErrorTypingJudgment|1)

    /**
     * Extracts the error message.
     *
     * @type ErrorTypingJudgment -> List(MessagePart)
     */
    get-error-message = proj(ErrorTypingJudgment|2)

    /**
     *
     */
    eq-inputs = where(get-generic-name; equal(|"Eq")); get-arguments
    eq-outputs = where(get-generic-name; equal(|"Eq")); ![]
    neq-inputs = where(get-generic-name; equal(|"Neq")); get-arguments
    neq-outputs = where(get-generic-name; equal(|"Neq")); ![]


    /**
     * Extacts all consituents from the given term that are marked
     * as inputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-inputs(|declarations) = eq-inputs <+ neq-inputs <+ filter-hole-positions(?(_, "I") | declarations)

    /**
     * Extacts all consituents from the given term that are marked
     * as outputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-outputs(|declarations) = eq-outputs <+ neq-outputs <+ filter-hole-positions(?(_, "O") | declarations)

    /**
     * Extracts all consituents from a given term that satisfy the given
     * condition `cond`.
     *
     * @param cond - an arbitrary strategy
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    filter-hole-positions(cond|declarations) : node -> consituents
        where
            args := <get-arguments> node;
            positions := <get-hole-positions(|declarations); filter(cond); map(Fst)> node;
            consituents := <map(\n -> <index(|n)> args\)> positions

    /**
     * Fetches the declaration for the given node and provides a list of
     * holes together with their positions.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-hole-positions(|declarations) : node -> <add-indices> holes
        where
            declaration-number := <get-judgment-id> node;
            declaration := <index(|declaration-number)> declarations;
            holes := <collect-all(?Hole(_,_), conc); map(proj(Hole|2))> declaration

    /**
     * Rule that transforms a typing rule into a constraint template.
     *
     * FIXME: This code needs refactoring
     *
     * @param j - judgment declarations
     * @param c - context declarartions
     */
    to-template(|j, c) : TypingRule(premisses-struct, RuleName(_, name), conclusion) ->
        <replace-meta-variables>
          Template__(<map(switch (get-typing-judgment, id)
                         case (node-is-ctx-lookup, id):
                              \(lookup, deps) ->
                                (Lookup__(<get-typing-judgment; get-context-id> lookup,
                                          <get-typing-judgment; get-inputs(|c)> lookup,
                                          <get-typing-judgment; get-outputs(|c)> lookup,
                                          <get-error-message> lookup)
                                 , <map(Dupl; (id, \i -> <index(|i)> sorted-premisses\; Fst; get-typing-judgment; get-outputs(|j)))> deps)\
                         case where((get-generic-name; equal(|"Eq"), id)):
                              \(j, dep) -> (<get-typing-judgment; to-tuple; makeEq(|<get-error-message; option(filter(?Error(_)))> j)> j, dep) \
                         case where((get-generic-name; equal(|"Neq"), id)):
                              \(j, dep) -> (<get-typing-judgment; to-tuple; makeNeq(|<get-error-message> j)> j, dep) \
                         otherwise:
                              \(judgment, deps) ->
                                 (Judgment__(<get-typing-judgment; get-judgment-id> judgment,
                                            <get-typing-judgment; get-inputs(|j); filter(not(node-is-ctx))> judgment,
                                            <get-typing-judgment; get-inputs(|j); filter(node-is-ctx); mapconcat(ctx-bind-to-kv-list(|c))> judgment,
                                            <get-typing-judgment; get-outputs(|j)> judgment,
                                            <get-error-message> judgment)
                                 , <map(Dupl; (id, \i -> <index(|i)> sorted-premisses\; Fst; get-typing-judgment; get-outputs(|j)))> deps) \
                         end)> sorted-premisses,
                     Conclusion__(
                         <get-typing-judgment; get-judgment-id> conclusion,
                         name,
                         <get-typing-judgment; get-inputs(|j); partition(not(node-is-ctx), node-is-ctx);
                         (id, mapconcat(ctx-bind-to-kv-list(|c)))> conclusion',
                         <get-typing-judgment; get-outputs(|j)> conclusion'))
        where
            // Convert premisses into a list.
            premisses-list := <to-list(PremiseBase, PremiseCons)> premisses-struct;

            // Transform implicit equalities in the conclusion into explicit equalities. Implicit
            // equalities are removed by introducing fresh variables and equality constraints
            // between them. This results in a list of variable substitutions and a list of premisses.
            (substitutions, equalities) := <get-typing-judgment; get-inputs(|j);
                                            make-implicit-equalities-explicit(true | <get-error-message> conclusion, conclusion)> conclusion;

            // Replace each occurence with the corresponding new meta-variable.
            conclusion' := <concat; replace-once(|conclusion)> substitutions;

            // Replace every occurence with only one representative of the new meta-variables.
            premisses-list' := <map(Hd); replace-all(meta-variable-equal|premisses-list)> substitutions;

            // Transform implicit equalities in the premisses into explicit equalities.
            premisses-impl-eq := <map(\premise -> <get-typing-judgment; (node-is-ctx-lookup < get-inputs(|c) + get-inputs(|j));
                                      make-implicit-equalities-explicit(false | <get-error-message> premise, conclusion')> premise\)> premisses-list';

            // Replace every occurence with only one representative of the new meta-variables.
            premisses-list'' := <zip; map(\(premise, subst) -> <concat; replace-once(|premise)> subst\)> (premisses-list', <map(Fst)> premisses-impl-eq);

            // Add the explicit equalities to the list of premisses.
            premisses-with-equalities := <conc> (premisses-list'', equalities, <mapconcat(Snd)> premisses-impl-eq);

            // Enumerate the premisses.
            enum-premisses := <add-indices> premisses-with-equalities;
            
            // Compute the dependencies between the premisses.
            dependencies := <map((id, get-typing-judgment; get-inputs(|j));
                                 (id, compute-dependencies(|enum-premisses, conclusion', j)))> enum-premisses;
            
            // Create a topological order of the premisses according to their dependencies.
            eval-order := <zip> (<map(Fst)> enum-premisses, <top-sort <+ exit-with-error(|<conc-strings> ("Cyclic dependencies in rule ", <option-to-string> name), 1)> dependencies);
            
            // Assign the dependencies to the premisses.
            premisses := <zip> (premisses-with-equalities, <map(Snd)> dependencies);
            
            // Sort the premisses according to the topological order. This includes updating references
            // to premisses in the dependencies.
            sorted-premisses := <map(\ (i, k) -> <index(|k); (id, replace(|i, k))> premisses\)> eval-order

    /**
     * Replaces all meta-variables with fresh variables of the constraint language.
     * This way the unification has to deal only with one kind of variables.
     */
    replace-meta-variables : ast -> <collect-om(node-is-meta-variable); Dupl;
                                     (id, length; newnames(|"X"); map(makeVar));
                                     zip; replace-all(|ast)> ast

    /**
     * Transforms context bindings as they occur in the specification language into
     * a key-value list. This list contains triples with the context identifier, the inputs
     * and the outputs.
     *
     * @param c - context declarartions
     */
    ctx-bind-to-kv-list(|c) : node -> [Ctx__(ctx)]
        where <node-is-ctx-var> node;
              ctx := <get-context-id> node
    ctx-bind-to-kv-list(|c) : node -> [Reset__(ctx)]
        where <node-is-ctx-empty> node;
              ctx := <get-context-id> node
    ctx-bind-to-kv-list(|c) : node -> [Binding__(ctx, inputs, outputs) | <ctx-bind-to-kv-list(|c)> tail]
        where <node-is-ctx-bind> node;
              ctx := <get-context-id> node;
              inputs := <get-inputs(|c)> node;
              outputs := <get-outputs(|c)> node;
              tail := <get-arguments; last> node
              
    /**
     * Returns the subset of the passed judgments that contain
     * at least one of the `inputs`.
     *
     * @param terms - judgments
     * @param decls - judgment declarations
     */
    compute-dependencies(|terms, conclusion, decls) : inputs ->
        <filter(where(Snd; get-typing-judgment; get-outputs(|decls);
                \ os -> <foldl(\ (i, l) -> <collect-om(?i); conc(|l)> os
                               \)> (input-meta-variables, [])
                \; diff(|conclusion-meta-variables); not(equal([]))); Fst)> terms
        where input-meta-variables := <collect-om(node-is-meta-variable)> inputs;
              conclusion-meta-variables := <get-typing-judgment; get-inputs(|decls); collect-om(node-is-meta-variable)> conclusion

    /**
     * Generates from implicit equalities equality premisses.
     */
    make-implicit-equalities-explicit(is-conclusion | errors, conclusion) =
        collect-om(and(node-is-meta-variable, is-conclusion <+ \ n -> <collect(?n); equal(|[])> conclusion\), conc);
        group(meta-variable-equal); filter(where(length; gt(|1)));
        Dupl; (id, map(map(make-new-meta-variable))); zip;
        Dupl; (map(zip), mapconcat(make-eq-judgments(|errors)))

    /**
     * Creates a new meta-variable of the same class.
     */
    make-new-meta-variable : meta-variable -> <mkterm> (<get-constructor> meta-variable,
                                                        [<newname> "X", None()])

    /**
     * Creates from a given list of meta-variables a list of equality judgments.
     */
    make-eq-judgments(|errors) : (old, new) -> <make-eq-judgments'(|relevant-errors)> new
        where relevant-errors := <option(filter(where(\error ->
                                                        <subseteq> (<collect-om(node-is-meta-variable)> error,
                                                                  old)
                                                      \);
                                                \Implicit(error) ->
                                                  Error(<zip; replace-all(|error)> (old, new))
                                                \))> errors
    make-eq-judgments'(|errors) : [] -> []
    make-eq-judgments'(|errors) : [x] -> []
    make-eq-judgments'(|errors) : [x, y | xs] -> [eq-judgment | <make-eq-judgments'(|errors)> [y | xs]]
        where eq-judgment := ErrorTypingJudgment(<mkterm> ("TypingJudgment-Eq", [x, y]), errors)
    
strategies
    to-templates(|judgments, context-definitions) =
         innermost(to-template(|judgments, context-definitions))