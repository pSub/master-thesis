/**
 * Constraint generation phase
 */
module generate-constraints

imports utils
imports constraint-language
imports constraint-template-language
imports constraint-solving
imports constraint-utils
imports optimize-constraint-templates
imports template-utils
imports generate-templates
imports store-utils
imports include/SLTC

rules

    /**
     * Generates constraints from the given specification but
     * calls `to-temlates' on its own. Useful for testing purposes.
     *
     * @type Module -> List(Option(Outputs), List(Constraint))
     */
    generate-constraints : Module(_, _, Some(Language(target-language)),
                                  Contexts(context-definitions), _,
                                  Judgments(judgments),
                                  Rules(typing-rules), _) -> <generate-constraints(|templates)>
        where
            // Generate the constraint templates from the type system specification
            templates := <to-templates(|judgments, context-definitions, target-language);
                          optimize-templates(|target-language, context-definitions)> typing-rules
    generate-constraints = failed

    /**
     * Generates constraints from the given specification module
     * and from the `templates'.
     *
     * @param List(Template)
     * @type Module -> List(Option(Outputs), List(Constraint))
     */
    generate-constraints(|templates) : Module(_, _, _, _, _, _, _, None()) ->
        <exit-with-error(|"Not conjectures found", 1)>
    generate-constraints(|templates) : Module(_, _, _, _, _, _, Rules([]), _) ->
        <exit-with-error(|"Not typing rules found", 1)>
    generate-constraints(|templates) :
        Module(ModuleDec(_),
                 imports,
                 Some(Language(l)),
                 Contexts(context-definitions),
                 MetaVariables(meta-variables),
                 Judgments(judgments),
                 Rules(typing-rules),
                 Some(Conjectures(conjectures)))
        -> <finally(
              map(finally(
                 \TypingRule(PremiseBase(), RuleName(type,_), conjecture) ->
                    // Prepare the input and initialize the store.
                    <prepare-generation(|judgments, context-definitions, store);
                    \(inputs, outputs) ->
                        // Generate the constraints.
                        <generate(true |templates, store, outputs)> (<get-judgment-id> conjecture, inputs)
                    \; \result -> (result, type)\
                    > conjecture
                 \, clear-store(|store))),
            tidy-up(|store))> conjectures
        where
            // Initialize the store that contains the contexts
            context-number := <collect-om(is-ctx-modification; get-ctx-id); list-max <+ !0> templates;
            empty-contexts := <inc; range; Tl; map-with-index((id, !([], <new-hashtable>)))> context-number;
            store := <new-hashtable(|context-number, 100); hashtable-putlist(|empty-contexts)>
    generate-constraints(|templates) = failed(|[templates])

    /**
     * Pepares the inputs for the constraint generation and initializes the store.
     *
     * @param judgment definitions
     * @param context definitions
     * @param store - hashtables that store context information
     */
    prepare-generation(|judgments, context-definitions, store) =
        ?conjecture;
        <get-inputs(|judgments); where(initialize-store(|store, context-definitions))> conjecture;
        <(get-inputs(|judgments); remove-all(node-is-ctx), get-outputs(|judgments))> (conjecture, conjecture)
    prepare-generation(|judgments, context-definitions, store) =
        failed(|[judgments, context-definitions, store])

    /**
     * Generates the set of constraints.
     *
     * @param templates - constraint templates
     * @param store - list of hashtables that store context information
     * @param expected outputs of the previous template
     * @type (judgment-number, inputs) -> (Option(Outputs), List(Constraints))
     */
    generate(|templates, store, expected-outputs) = generate(false | templates, store, expected-outputs)
    generate(|templates, store, expected-outputs) = failed(|[templates, store, expected-outputs])

    /**
     * Generates the set of constraints.
     *
     * @param succeeds if this is the first call to generate fails otherwise
     * @param templates - constraint templates
     * @param store - hashtables that store context information
     * @param expected outputs of the previous template
     * @type (judgment-number, inputs) -> (Option(Outputs), List(Constraints))
     */
    generate(init | templates, store, expected-outputs) : (judg-number, inputs) ->
             // Find the constraint template that matches the inputs of the given term
             // if a matching rule could be found evaluate that, otherwise return an error.
             <find-match(|inputs, judg-number, store) < generate'(init | templates, inputs, store, expected-outputs)
                                                      + !(None(), [CFail__(Error(["No rule found that matches", inputs]))])> templates
    generate(init | templates, store, expected-outputs) = failed(|[templates, store, expected-outputs])


    /**
     * Helper rule for constraint generation. It pattern matches against the matching
     * template found in `generate` and does the actual constraint generation.
     *
     * @param succeeds if this is the first call to generate fails otherwise
     * @param t - constraint templates
     * @param term - input terms
     * @param s - hashtable containing hashtables that store context information
     * @param expected outputs of the previous template
     * @type inputs -> (Option(Outputs), List(Constraints))
     */
    generate'(init | t, term, s, expected-outputs) :
         Template__(name, calls, Conclusion__(judg-name, (pattern, ctx), outputs)) ->
         (Some(outputs'), new-constraints)
        where
            // If a variable occurs in the inputs of a premise but not in the inputs of the conclusion nor
            // in the outputs of other premisses but as the output of the conclusion, then we bring it into
            // scope with the expected outputs.
            var := <filter(?Var__(_); where(\v -> <elem> (v, <collect-om(get-premise-inputs); flatten-list> calls)\);
                                      where(\v -> <not(elem)> (v, <collect-om(get-premise-outputs); flatten-list> calls)\))> outputs;

            // Retrieve and remove elements from the context according to the context pattern.
            ctx' := <filter(\Binding__(ctx, i, _) -> <pop(|s)> ctx \)> ctx;

            // Append the context pattern to the input pattern.
            pattern'' := <conc> (pattern, <filter(\Binding__(_, i, o) -> (i, o)\)> ctx, [var]);

            // Append the instantiated context pattern to the input term.
            term'' := <conc> (term, ctx', <instantiate(|outputs, expected-outputs); singelton> var);

            // Use fresh variable names to instantiate the rule.
            // FIXME: Is there a better solution, than renaming?
            vars := <collect-om(\Var__(v) -> <(not(string-starts-with(|"Y")); !Var__(v))> v\)> (expected-outputs, outputs, pattern'', term'', calls);
            (expected-outputs', pattern', term', calls', outputs') := <zip; replace-all(|(expected-outputs, pattern'', term'', calls, outputs))> (vars, <length; newnames(|"Y"); map(makeVar)> vars);

            // Execute the calls of the rule.
            outputs-constraints := <foldl( safe-hashtable-deep-copy(\(s', i) -> <execute(|t, s', pattern', term', name, outputs', expected-outputs')> i\ | s))> (calls', []);

            // Make constraints for input-output dependencies in the conclusion of the rule.
            input-output-constraints := <make-io-dependency-constraints(|pattern', term', name)> outputs';

            if or(init, <equal(|[])> calls)
            then assertion := <zip; map(\(a, b) -> <makeCEq(|Some([Error(["Type", a, "does not match annotated type", b])]))> (a, b)\)> (outputs', expected-outputs')
            else assertion := []
            end;

            // Merge all generated constraints.
            new-constraints := <conc> (assertion, <mapconcat(Snd)> outputs-constraints, input-output-constraints)

    generate'(init | ts, term, s, expected-outputs) : Fork__(rulez) ->
           // Apply all rules until the first one produces a solvable constraint set
           // apply the resulting mgu and return the term as an output.
           <until(safe-hashtable-deep-copy(\(s', i) -> <generate'(init | ts, term, s', expected-outputs);
                   \(Some(o), cs) -> (<unify-internal; apply-mgu(|o)> cs, cs)\> i\| s))
                   < \(x, cs) -> (Some(x), cs)\
                   + !(None(), [CFail__(Error(["No derivation found for ", term]))])> rulez

    generate'(init | t, term, s, expected-outputs) = failed(|[t, term, s, expected-outputs])

    /**
     * Executes the calls specified in the rules.
     *
     * @param t - constraint templates
     * @param s - hashtable containing hashtables that store context information
     * @param pattern - the pattern of the conclusion
     * @param term - input terms
     * @param name - the name of the rule
     * @param outputs of the conclusion
     * @param expected outputs of the conclusion
     * @type ((call, dependencies), accumulator) -> (outputs, constraints)
     */
    execute(|t, s, pattern, term, name, o, e) : ((call, dep), accu) ->
                          // Update the pattern and the term according to
                          // the dependencies.
                        <(term', pattern') := <update(|pattern, term, accu)> dep;
                          switch !call
                          case ?Lookup__(ctx, inputs, outputs, error):
                                <instantiate-lookup(|pattern', term')> (ctx, inputs);
                                (lookup(|s) < \ o -> (Some(o), <zip; map(makeCEq(|<replace(|"{}", o)> error); instantiate-error(|pattern', term'))> (o, outputs))\
                                            + \ (_, i) -> (None(), [CFail__(Error([i, " not found in context"]))])\)
                          case ?Eq__(a, b, error):
                              !(None(), [<instantiate-error(|pattern', term')>
                                        CEq__(<instantiate(|pattern', term')> a,
                                              <instantiate(|pattern', term')> b,
                                              error) ])
                          case ?Neq__(a, b, error):
                              !(None(), [ <instantiate-error(|pattern', term')>
                                        CNeq__(<instantiate(|pattern', term')> a,
                                               <instantiate(|pattern', term')> b,
                                               error) ])
                          case ?Judgment__(num, inputs, ctx, expected-outputs, error):
                            // Instantiate the judgment that shall be called.
                            (judg-number, param, binding, outputs) := <instantiate-judgment(|pattern', term')> (num, inputs, ctx, expected-outputs);

                            // Create constraints for the variables in the context bindings.
                            binding-constraints := <make-binding-constraints(|name)> (<to-tuple; Third> call, binding);

                            // Call generate for the instantiated judgment and the updated store.
                            <generate(|t, <update-store(|s)> binding, <try(instantiate(|o, e))> outputs)> (judg-number, param);

                            // Pass the outputs untouched and add the binding constraints to
                            // the resulting constraints.
                            (id, conc(|binding-constraints));
                            try(\(Some(o), cs) -> (Some(o), <conc(|<zip;map(makeCEq(|<replace(|"{}", o)> error); instantiate-error(|pattern', term'))> (o, outputs))> cs)\)
                            otherwise:
                                exit-with-error(|"Encountered a maleformed template", 1)
                          end;
                          singelton; conc(|accu)> // Book keeping.

   execute(|t, s, pattern, term, name, o, e) = failed(|[t, s, pattern, term, name, o, e])
                          

    /**
     * Extracts the patterns out of the dependencies and appends those
     * to the pattern of the conclusion.
     * Extracts the already computed outputs and constraints and unify those
     * that are listed in the given dependencies.
     *
     * @param pattern - the pattern of the conclusion
     * @param term - an arbitary term
     * @param accu - the accumulator of `execute'
     * @type dependencies -> List(pattern) 
     */                      
    update(|pattern, term, accu) = filter(Dupl;(Fst; \i -> <index(|i)> accu\;
                                                \(Some(o), cs) -> <unify-internal; apply-mgu(|o)> cs\,
                                                Snd)
                                          ); unzip; (conc(|term), conc(|pattern))
    update(|pattern, term, accu) = failed(|[pattern, term, accu])

    /**
     * Initialized the given store with the context bindings.
     *
     * @param store - a store
     * @param context definitions
     * @type List(term) -> store
     */
    initialize-store(|store, context-definitions) =
                               filter(node-is-ctx-bind);
                               mapconcat(ctx-bind-to-kv-list(|context-definitions));
                               update-store(|store)
    initialize-store(|store, context-definitions) = failed(|[store, context-definitions])


    /**
     * Cleans up everything that was needed during the constraint
     * generation. This includes:
     *
     *     - destroying the store
     *
     * @param store - a hashtable containing hashtables
     */
    tidy-up(|store) = destroy-store(|store)
    tidy-up(|store) = failed(|[store])