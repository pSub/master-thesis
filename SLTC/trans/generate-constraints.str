module generate-constraints

imports utils
imports generate-constraint-generator
imports include/SLTC

signature
    sorts Constraint
    constructors
                
        ConstraintSet : List(Constraint)
        
        
rules
    generate-constraints : 
        Module(ModuleDec(_),
                 imports,
                 Language(l),
                 MetaVariables(m),
                 Contexts(ContextDefinitions),
                 Judgments(judgments),
                 Rules(typing-rules),
                 Some(Conjectures(conjectures)))
        -> <map(\TypingRule(_, conjecture) ->
                 <get-inputs(|judgments); generate(|judgments, templates)> conjecture
                \)> conjectures
        where
            templates := <to-constraint-generator(|judgments, typing-rules)>
             
    generate(|judgments, templates) : inputs -> <generate'(|judgments, templates)> match
        where
             match := <find-match(|inputs)> templates
             
    generate'(|j, t) : Rule(pattern, outputs , constraints) -> (outputs, constraints)
    generate'(|j, t) : Binding(xs, calls, Rule(pattern, outputs, constraints)) ->
            (outputs, constraints')
        where
            outputs-constraints := <map(debug; generate(|j, t))> calls;
            xs-outputs := <zip> (xs, <map(Fst)> outputs-constraints);
            constraints' := <map(replace(|constraints))> xs-outputs
            
    // TODO: Use the patterns, to extract the subterms

    // FIXME: What if multiple rules match?    
    find-match(|inputs) : [] -> <singelton; error> "No match found!"
    find-match(|inputs) : [t|ts] -> <if equal(|<length> inputs, <get-pattern; length> t)
                                     then if <zip; fanout; (filter(match-constructors); length,
                                                            length);equal> (inputs, <get-pattern> t)
                                           then <id> t
                                           else <find-match(|inputs)> ts
                                           end
                                     else <find-match(|inputs)> ts
                                     end>
    
    match-constructors : (t, s) -> < equal(|t-cons, s-cons) <+
                                     <is-meta-variable> s-cons>
        where
            s-cons := <explode-term; Fst> s;
            t-cons := <explode-term; Fst> t
            
    is-meta-variable = string-tokenize(|<singelton> '-'); Hd; \ cons -> <equal> (cons, "MetaVariable") \