module generate-constraints

imports utils
imports constraint-language
imports generate-constraint-generator
imports include/SLTC

signature
    sorts Constraint
    constructors
                
        ConstraintSet : List(Constraint)
        
rules
    generate-constraints : 
        Module(ModuleDec(_),
                 imports,
                 Language(l),
                 MetaVariables(meta-variables),
                 Contexts(context-definitions),
                 Judgments(judgments),
                 Rules(typing-rules),
                 Some(Conjectures(conjectures)))
        -> <map(\TypingRule(_, conjecture) ->
                 <get-inputs(|judgments); remove-all(node-is-ctx(|context-classes));
                  generate(|judgments, context-definitions, templates, store)> conjecture
                \)> conjectures
        where
            context-names := <map(proj(ContextDefinition|1))> context-definitions;
            context-classes := <filter(\MetaVariableDefinition(name, _, Scope(scope)) ->
                                       <isect; not(equal(|[])); !name> (context-names, scope)\)>
                                       meta-variables;
            templates := <to-constraint-generator(|judgments, typing-rules, context-definitions, context-classes)>;
            empty-contexts := <length; range; fanout; (id, map(new-hashtable)); zip> context-definitions;
            // FIXME: Set correct initial size
            store := <new-hashtable; hashtable-putlist(|empty-contexts)>

    generate(|judgments, contexts, templates, store) : inputs ->
             <generate'(|judgments, contexts, templates, inputs, store)> match
        where
             match := <find-match(|<debug> inputs)> templates

    generate'(|j, c, t, i, s) : Rule(pattern, outputs , constraints) -> (outputs, constraints)
    generate'(|j, c, t, i, s) : Binding(xs, calls, lookups, Rule(inputs, outputs, constraints)) ->
            (outputs', <conc> (<mapconcat(Snd)> outputs-constraints', constraints'', <flatten-list> lookedup'))
        where
            pattern := <conc> (inputs, outputs);
            term := <conc> (i, outputs);
            lookups' := <map((id, find-matching-positions(|pattern); extract-terms(|term), id))> lookups;
            lookedup := <map(lookup(|s))> lookups';
            positions := <map((find-matching-positions(|pattern), map((id, find-matching-positions(|pattern), find-matching-positions(|pattern)))))> calls;
            input-terms := <map((extract-terms(|term), map((id, extract-terms(|term), extract-terms(|term)))))> positions; 
            outputs-constraints := <map(\(term, b) -> <generate(|j, c, t, <update-store(|s)> b)> term\)> input-terms;
            // FIXME: Is there a better solution, than renaming?
            vars := <collect-om(?Var__(_))> (xs, constraints);
            (xs', outputs', constraints', outputs-constraints', lookedup') := <zip; replace-all(|(xs, outputs, constraints, outputs-constraints, lookedup))>
                                                                    (vars, <length; newnames(|"Y"); map(makeVar)> vars);
            xs-outputs := <zip; mapconcat(zip)> (xs', <map(Fst)> outputs-constraints');
            constraints'' := <replace-all(|constraints')> xs-outputs

    extract-terms(|inputs) = map(retrieve(|inputs))
    find-matching-positions(|c-pattern) = map(get-position(|c-pattern); reverse)
    get-position(|pattern) : x -> <get-index < singelton + search> (x, pattern)

    // FIXME: What if x is not entirely containted in pattern?
    search : (x, pattern) -> <search'> (x, [1], pattern)
    search' : (x, is, []) -> <fail>
    search' : (x, [i|is], [v@c#([]) | pattern]) -> <if <equal> (x, v)
                                                    then <id> [i|is]
                                                    else <search'> (x, <add; singelton> (i, 1), pattern)
                                                    end>
    search' : (x, is, [c#(args) | pattern]) -> <get-index < \ i -> [i|is] \ + <search'> (x, [1|is], <conc> (args, pattern)) > (x, args)

    retrieve(|node) : [p] -> <index> (p, <get-arguments> node)
    retrieve(|node) : [p|path] -> <index; \ node -> <retrieve(|node)> path\> (p, <get-arguments> node)

    // FIXME: What if multiple rules match?    
    find-match(|inputs) : [] -> <singelton; error> "No match found!"
    find-match(|inputs) : [t|ts] -> <if equal(|<length> inputs, <get-pattern; length> t)
                                     then if <zip; fanout; (filter(match-constructors); length,
                                                            length);equal> (inputs, <get-pattern> t)
                                           then <id> t
                                           else <find-match(|inputs)> ts
                                           end
                                     else <find-match(|inputs)> ts
                                     end>

    match-constructors : (t, s) -> < equal(|t-cons, s-cons) <+
                                     <is-meta-variable> s-cons>
        where
            s-cons := <get-constructor> s;
            t-cons := <get-constructor> t

    update-store(|s) : ctx-binds -> <foldl(\((ctx, i, o), s') -> <hashtable-put(|ctx, <hashtable-get(|ctx); hashtable-put(|i, o)> s')> s'\)> (ctx-binds, s)

    lookup(|s) : (ctx, key, vars) -> <zip;map(makeEq)> (vars, <hashtable-get(|ctx); hashtable-get(|key)> s)