module generate-constraints

imports utils
imports constraint-language
imports generate-constraint-generator
imports include/SLTC

signature
    sorts Constraint
    constructors
                
        ConstraintSet : List(Constraint)
        
        
rules
    generate-constraints : 
        Module(ModuleDec(_),
                 imports,
                 Language(l),
                 MetaVariables(m),
                 Contexts(contexts),
                 Judgments(judgments),
                 Rules(typing-rules),
                 Some(Conjectures(conjectures)))
        -> <map(\TypingRule(_, conjecture) ->
                 <get-inputs(|judgments); generate(|judgments, contexts, templates, store)> conjecture
                \)> conjectures
        where
            templates := <to-constraint-generator(|judgments, typing-rules)>;
            empty-contexts := <length; range; map(new-hashtable)> contexts;
            store := <new-iset; iset-addlist(|empty-contexts)>

    generate(|judgments, contexts, templates, store) : inputs ->
             <generate'(|judgments, contexts, templates, inputs, store)> match
        where
             match := <find-match(|inputs)> templates
             
    generate'(|j, c, t, i, s) : Rule(pattern, outputs , constraints) -> (outputs, constraints)
    generate'(|j, c, t, i, s) : Binding(xs, calls, Rule(pattern, outputs, constraints)) ->
            (outputs', <conc> (<mapconcat(Snd)> outputs-constraints', constraints''))
        where
            positions := <map(Fst;find-matching-positions(|pattern))> calls;
            ctx-inputs-outputs := <map(Snd; map(fanout; (get-inputs(|c), get-outputs(|c))))> calls;
            input-terms := <map(extract-terms(|i))> positions;
            outputs-constraints := <map(generate(|j, c, t, s))> input-terms;
            // FIXME: Is there a better solution, than renaming?
            vars := <collect-om(?Var__(_))> (xs, constraints);
            (xs', outputs', constraints', outputs-constraints') := <zip; replace-all(|(xs, outputs, constraints, outputs-constraints))> 
                                                                    (vars, <length; newnames(|"Y"); map(makeVar)> vars);
            xs-outputs := <zip; mapconcat(zip)> (xs', <map(Fst)> outputs-constraints');
            constraints'' := <replace-all(|constraints')> xs-outputs
            
    extract-terms(|inputs) = map(\pos -> <fetch> (inputs, pos)\)
    find-matching-positions(|c-pattern) = map(get-position(|c-pattern); reverse)
    get-position(|pattern) : x -> <get-index < singelton + search> (x, pattern)

    // FIXME: What if x is not entirely containted in pattern?
    search : (x, pattern) -> <search'> (x, [1], pattern)
    search' : (x, is, []) -> <fail>
    search' : (x, [i|is], [v@c#([]) | pattern]) -> <if <equal> (x, v)
                                                    then <id> [i|is]
                                                    else <search'> (x, <add; singelton> (i, 1), pattern)
                                                    end>
    search' : (x, is, [c#(args) | pattern]) -> <get-index < \ i -> [i|is] \ + <search'> (x, [1|is], <conc> (args, pattern)) > (x, args)

    // FIXME overwrites a library function
    fetch : (cons#(args), [p]) -> <index> (p, args)
    fetch : (cons#(args), [p|path]) -> <index; \ n -> <fetch> (n, path)\> (p, args)

    // FIXME: What if multiple rules match?    
    find-match(|inputs) : [] -> <singelton; error> "No match found!"
    find-match(|inputs) : [t|ts] -> <if equal(|<length> inputs, <get-pattern; length> t)
                                     then if <zip; fanout; (filter(match-constructors); length,
                                                            length);equal> (inputs, <get-pattern> t)
                                           then <id> t
                                           else <find-match(|inputs)> ts
                                           end
                                     else <find-match(|inputs)> ts
                                     end>
    
    match-constructors : (t, s) -> < equal(|t-cons, s-cons) <+
                                     <is-meta-variable> s-cons>
        where
            s-cons := <get-constructor> s;
            t-cons := <get-constructor> t
