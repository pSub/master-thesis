module constraint-utils

imports utils
imports constraint-language
imports constraint-template-language
imports store-utils

imports include/SLTC

rules
        
    /**
     * Instantiates the variables in the given input according to their positions in
     * the `pattern' with the provided `terms'.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type List(a) -> List(a)
     */
    instantiate(|pattern, terms) : input -> <memo(instantiate')> (input, pattern, terms)
    instantiate' : (input, pattern, terms) -> <foldl(\((x, t), i) -> <oncetd(?x; !t)> i\)> (instantiations, input)
        where instantiations := <make-set; find-matching-positions(|pattern); extract-terms(|terms)> input

    /**
     * An version of `instantiate` tailored for judgments.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type (List(a), List(a, List(a), List(a)) -> List(a)
     */    
    instantiate-judgment(|pattern, terms) =
        (instantiate(|pattern, terms), instantiate-ctx-binding(|pattern, terms))

    /**
     * An version of `instantiate' tailored for conext bindings.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     */
    instantiate-ctx-binding(|pattern, terms) = map(try((id, instantiate(|pattern, terms),
                                                        instantiate(|pattern, terms))))

    /**
     * An version of `instantiate` tailored for context lookups.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type (List(a), List(a)) -> List(a)
     */
    instantiate-lookup(|pattern, terms) = (id, instantiate(|pattern, terms))

    /**
     * An version of `instantiate` tailored for error messages.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type Constraint -> List(a)
     */
    instantiate-error(|pattern, terms) : constraint ->
        <put-info(|<get-info; maybe(\ Error(e) ->
                                        Error(<instantiate(|pattern, terms)> e)
                                    \ | None())
                   > constraint
                  )> constraint
    
    /**
     * Instantiate variables that occur as an output and as an input and
     * provide the result as constraints.
     *
     * @param pattern - an arbitrary list of terms
     * @param term - an arbitrary list of terms
     * @param name - a string
     * @type List(a) -> List(Constraint)
     */
    make-io-dependency-constraints(|pattern, term, name) =
        make-implicit-equality-constraints(filter(where(\v -> <sometd(?v)> pattern\)) | pattern, term, name)

    /**
     * Creates implicit equalities for variables that occur more than once.
     *
     * @param pattern - an arbitrary list of terms
     * @param term - an arbitrary list of terms
     * @param name - a string
     * @type List(a) -> List(Constraint)
     */
    make-implicit-equality-constraints(|pattern, term, name) =
        make-implicit-equality-constraints(\ vars -> <foldl(\(x, xs) -> 
                                                                <delete> (x, xs)
                                                            \); isect(|vars)> (<make-set> vars,vars)
                                           \ | pattern, term, name)

    /**
     * Creates implicit equalities for those variables selected by `select'.
     *
     * @param pattern - an arbitrary list of terms
     * @param term - an arbitrary list of terms
     * @param name - a string
     * @type List(a) -> List(Constraint)
     */
    make-implicit-equality-constraints(select | pattern, term, name) =
        collect-om(?Var__(_), conc); select; Dupl;
        (id, instantiate(|pattern, term)); zip; map(makeEq(|name))
    
    /**    
     * Creates equality constraints for every variable and its
     * corresponding term in a constraint binding.
     *
     * @param info - constraint information (type Info)
     * @type (binding, binding) -> List(Constraint)
     */
    make-binding-constraints(|info)
        = (mapconcat(Dupl; (Snd, Third); conc), mapconcat(Dupl; (Snd, Third); conc));
           zip; filter((?Var__(_), id));  map(makeEq(|info))
        
    /**
     * Provided with a list of paths, this strategy returns the
     * elements in `terms` described by the paths. A path describes
     * contains the positions in the argument list to which should be
     * descended to.
     * 
     * @param terms - an list of arbitrary terms
     * @type List(List(Int)) -> List(a)
     */
    extract-terms(|terms) = map((id, retrieve(|terms)))
    
    /**
     * Finds the positions of the provided elements in the `pattern`.
     *
     * @param pattern - an arbitrary term
     * @type List(a) -> List((a, List(Int)))
     */
    find-matching-positions(|pattern) = mapconcat(search(|pattern))

    /**
     * Traverses the pattern like a tree and records the path until `x` is
     * found literally in `pattern`. The recorded path contains the positions
     * in the argument list in which was descended.
     *
     * @param pattern - an arbitrary term
     * @type a -> (a, List(Int))
     */
    search(|pattern) : x -> <search'> (x, [], <add-indices> pattern)
    search' : (x, is, []) -> <fail>
    search' : (x, is, pattern) ->
        <conc> (<map(\i -> (x, [i | is])\; (id, reverse))> indices,
                <mapconcat(\(n, p) -> <search'> (x, [n | is], <get-arguments; add-indices> p)
                           \)> pattern)
        where indices := <get-indices> (x, pattern)
    search' : (x, is, pattern) ->
        <mapconcat(\(n, p) -> <search'> (x, [n | is], <get-arguments; add-indices> p)\)> pattern

    /**
     * Walks along the paths in `term` and returns to element
     * at the end of the path.
     *
     * @param pattern - an arbitrary term
     * @type List(Int) -> List(a)
     */
    retrieve(|term) : [p] -> <index> (p, <get-arguments> term)
    retrieve(|term) : [p|path] -> <index; \ node -> <retrieve(|node)> path\> (p, <get-arguments> term)

    /**
     * Search for the matching pattern for `inputs` in the constraint templates. 
     *
     * FIXME: What if multiple rules match?
     *
     * @param inputs - a list of arbitary terms
     * @param store - a hashmap containing hashmaps
     * @type List(Rule) -> Rule
     */    
    find-match(|inputs, store) : [] -> <singelton; error> "No match found!"
    find-match(|inputs, store) : [t|ts] ->
        <let check-constructors = zip; Dupl; (filter(match-constructors); length, length); equal
             check-contexts(|store) : (i, t) -> <get-ctx-pattern;
                                                 instantiate-ctx-binding(|<get-pattern> t, i);
                                                 match-contexts(|store)> t
         in
            if equal(|<length> inputs, <get-pattern; length> t)
            then if <check-constructors> (inputs, <get-pattern> t);
                    <check-contexts(|store)> (inputs, t)
                 then !t
                 else <find-match(|inputs, store)> ts
                 end
            else <find-match(|inputs, store)> ts
            end
         end>

    /**
     * Defines when two terms match. Succeeds if terms match
     * fails otherwise.
     */
    match-constructors : (t, s) -> <equal(|t-cons, s-cons) <+ <?Var__(_)> s>
        where
            s-cons := <get-constructor> s;
            t-cons := <get-constructor> t

    /**
     * Defines when a context pattern matches an the contexts in the store.
     */
    match-contexts(|store) =
                    where(contexts := <hashtable-getlist; map((id, (id, hashtable-getlist)))> store);
                    map(\(ctx, i, o) ->
                            <<zip; map(match-constructors)> (<lookup'; Hd; Fst; Snd> (ctx, contexts), i);
                            <innermost(?(ctx, _); !(ctx, <lookup; Tl> (ctx, contexts)))> contexts>
                        \ <+
                        \Reset(ctx) ->  <equal> (<index> (ctx, contexts), [])
                        \)