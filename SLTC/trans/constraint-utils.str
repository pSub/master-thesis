/**
 * Bundles all rules and strategies that are needed for
 * constraint generation. They are bundled here to avoid
 * cluttering up the constraint generation itself.
 */
module constraint-utils

imports utils
imports constraint-language
imports constraint-template-language
imports store-utils

imports include/SLTC

rules
        
    /**
     * Instantiates the variables in the given input according to their positions in
     * the `pattern' with the provided `terms'.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type List(a) -> List(a)
     */
    instantiate(|pattern, terms) : input -> <foldl(\((x, t), i) -> <replace(|x, t)> i\)> (instantiations, input)
        where instantiations := <collect-om(?Var__(_));
                                 find-matching-positions(|pattern);
                                 extract-terms(|terms)> input
    instantiate(|pattern, terms) = failed(|[pattern, terms])

    /**
     * A version of `instantiate' tailored for judgments.
     *
     * Note: Expects a tuple representation of a judgment as
     *       computed by `to-tuple'.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type (number, input, binding, output) -> (number, input, binding, output)
     */    
    instantiate-judgment(|pattern, terms) =
        (id, instantiate(|pattern, terms), instantiate-ctx-binding(|pattern, terms),
         instantiate(|pattern, terms))
    instantiate-judgment(|pattern, terms) = failed(|[pattern, terms])

    /**
     * A version of `instantiate' tailored for conext bindings.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type List(Ctx) -> List(Ctx)
     */
    instantiate-ctx-binding(|pattern, terms) =
        map(try(\Binding__(ctx, input, output) ->
                    Binding__(ctx, <instantiate(|pattern, terms)> input, <instantiate(|pattern, terms)> output)
                \))
    instantiate-ctx-binding(|pattern, terms) = failed(|[pattern, terms])

    /**
     * A version of `instantiate' tailored for context lookups.
     *
     * Note: Expects a tuple representation of a judgment as
     *       computed by `to-tuple'.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type (ctx, inputs) -> List(a)
     */
    instantiate-lookup(|pattern, terms) = (id, instantiate(|pattern, terms))
    instantiate-lookup(|pattern, terms) = failed(|[pattern, terms])

    /**
     * A version of `instantiate' tailored for error messages.
     *
     * @param pattern - an arbitrary list of terms
     * @param terms - an arbitrary list of terms
     * @type Constraint -> List(a)
     */
    instantiate-error(|pattern, terms) =
        ?constraint;
        put-error(|<get-error;
                    option(map(try(\Error(e) ->
                                       Error(<instantiate(|pattern, terms)> e)
                                    \)))> constraint)
    instantiate-error(|pattern, terms) = failed(|[pattern, terms])
    
    /**
     * Instantiate variables that occur as an output and as an input and
     * provide the result as constraints.
     *
     * @param pattern - an arbitrary list of terms
     * @param term - an arbitrary list of terms
     * @param name - a string
     * @type List(a) -> List(Constraint)
     */
    make-io-dependency-constraints(|pattern, term, name) =
        make-implicit-equality-constraints(filter(where(\v -> <sometd(?v)> pattern\)) | pattern, term, name)
    make-io-dependency-constraints(|pattern, term, name) = failed(|[pattern, term, name])

    /**
     * Creates implicit equalities for those variables selected by
     * strategy `select'.
     *
     * @param select - strategy that selects variables
     * @param pattern - an arbitrary list of terms
     * @param term - an arbitrary list of terms
     * @param name - a string
     * @type List(a) -> List(Constraint)
     */
    make-implicit-equality-constraints(select | pattern, term, name) =
        collect-om(?Var__(_), conc); select; Dupl;
        (id, instantiate(|pattern, term)); zip; map(makeCEq(|name))
    make-implicit-equality-constraints(select | pattern, term, name) =
        failed(|[pattern, term, name])

    /**    
     * Creates equality constraints for every variable and its
     * corresponding term in a constraint binding.
     *
     * @param info - constraint information (type Info)
     * @type (binding, binding) -> List(Constraint)
     */
    make-binding-constraints(|info) =
        (filter(to-tuple; Dupl; (Snd, Third); conc); concat, filter(to-tuple;Dupl; (Snd, Third); conc); concat);
         zip; filter((?Var__(_), id));  map(makeCEq(|info))
    make-binding-constraints(|info) = failed(|[info])
        
    /**
     * Provided with a list of paths, this strategy returns the
     * elements in `terms' described by the paths. A path contains
     * the positions in the argument list of nodes to which should be
     * descended to.
     * 
     * @param terms - an list of arbitrary terms
     * @type List(List(Int)) -> List(a)
     */
    extract-terms(|terms) = map((id, retrieve(|terms)))
    extract-terms(|terms) = failed(|[terms])
    
    /**
     * Finds the positions of the provided elements in the `pattern'.
     *
     * @param pattern - an arbitrary term
     * @type List(a) -> List((a, List(Int)))
     */
    find-matching-positions(|pattern) = filter(search(|pattern))
    find-matching-positions(|pattern) = failed(|[pattern])

    /**
     * Traverses the pattern like a tree and records the path until `x' is
     * found literally in `pattern'. The recorded path contains the positions
     * in the argument list in which was descended.
     *
     * @param pattern - an arbitrary term
     * @type a -> List(Int)
     */
    search(|pattern) : x -> <memo(search')> (x, [], <add-indices> pattern)
    search(|pattern) = failed(|[pattern])

    search' : (x, is, []) -> <fail>
    search' : (x, is, pattern) -> (x, <reverse> [index | is])
        where index := <get-index> (x, <map(Snd)> pattern)
    search' : (x, is, [(n, p) | pattern]) ->
        <<search'> (x, [n | is], <get-arguments; add-indices> p) <+
         <search'> (x, is, pattern)>

    /**
     * Walks along the paths in `term' and returns to element
     * at the end of the path.
     *
     * @param pattern - an arbitrary term
     * @type List(Int) -> List(a)
     */
    retrieve(|term) : [p] -> <index> (p, <get-arguments> term)
    retrieve(|term) : [p|path] -> <index; \node -> <retrieve(|node)> path\> (p, <get-arguments> term)
    retrieve(|term) = failed(|[term])

    /**
     * Search for the matching pattern for `inputs' in the constraint templates.
     *
     * A match is found, if the constructors of the input term and match the
     * pattern of the conclusion of a template and if the state of the store matches
     * the context pattern of the conclusion and if the judgment matches. 
     *
     * @param inputs - a list of arbitary terms
     * @param judgment number
     * @param store - a hashmap containing hashmaps
     * @type List(Rule) -> Rule
     */
    find-match(|inputs, judg-number, store) =
        filter(where(get-judgment-number; equal(|judg-number)));
        fetch-elem(find-match(|inputs, store))
    /** @internal */
    find-match(|inputs, store) : Fork__(ts) -> Fork__(ts')
        where ts' := <filter(find-match(|inputs, store)); where(not(equal(|[])))> ts;
              <not(equal(|[]))> ts'
    find-match(|inputs, store) : t ->
        <let check-constructors = zip; Dupl; (filter(match-constructors(?Var__(_), false)); length, length); equal
             check-contexts(|store) : (i, t) -> <get-ctx-pattern;
                                                 instantiate-ctx-binding(|<get-pattern> t, i);
                                                 match-contexts(|store)> t
         in
            if equal(|<length> inputs, <get-pattern; length> t)
            then if <check-constructors> (inputs, <get-pattern> t);
                    <check-contexts(|store)> (inputs, t)
                 then !t
                 else fail
                 end
            else fail
            end
         end>

    /**
     * Defines when two terms match. Succeeds if terms match
     * fails otherwise.
     *
     * @param strategy that succeedes if node is a variable fails otherwise
     * @param true for symmetric check, false otherwise
     * @type (ATerm, ATerm) -> a
     */
    match-constructors(var, sym) : (t, s) -> <(or(<where(sym); var> t, <var> s) <+ equal(|t-cons, s-cons);
                                    <zip> (t-args, s-args); map(match-constructors(var, sym))); !"match">
        where
            s-cons := <get-constructor> s;
            t-cons := <get-constructor> t;
            s-args := <get-arguments> s;
            t-args := <get-arguments> t

    /**
     * Defines when a context pattern matches an the contexts in the store. Succeeds
     * if the context pattern can be found in the given store and fails otherwise.
     *
     * @param store - a hashmap containing hashmaps
     * @type List(Ctx) -> List(Ctx)
     */
    match-contexts(|store) =
                    where(contexts := <hashtable-getlist; map((id, Fst))> store);
                    map(\Binding__(ctx, i, o) ->
                            <<zip; map(match-constructors(?Var__(_), false))> (<lookup'; Hd> (ctx, contexts), i);
                             <alltd(?(ctx, _); !(ctx, <lookup; Tl> (ctx, contexts)))> contexts>
                        \ <+
                        \Reset__(ctx) ->  <equal> (<lookup> (ctx, contexts), [])
                        \ <+ ?Ctx__(_))