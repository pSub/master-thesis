module constraint-solving

imports constraint-language
imports utils
imports include/SLTC

rules
    /**
     * Occurs check
     */
    occurs : (x, t) -> <sometd(?x)> t

    /**
     * Robinson unification
     */
    unify : cs -> <unify'> (cs, [])
    unify' : ([], mgu) -> ([], mgu)
    unify' : ([CEq__(t, t, info) | cs], mgu) -> <unify'> (cs, mgu)
    unify' : ([CNeq__(t, s, info)| cs], mgu) -> <unify'> (cs, mgu)
        where <not(equal)> (t, s)
    unify' : ([CEq__(t, Var__(x), info) | cs], mgu) ->
         <unify'> (<conc> (cs, <singelton> CEq__(Var__(x), t, info)), mgu)
    unify' : ([CEq__(v@Var__(x), t, info) | cs], mgu) -> <if <occurs> (v, t)
                                     then <error; fail> [x, " occurs in", t]
                                     else <unify'> (<replace(|cs)> (v, t), [(v, t)|mgu])
                                     end>
    unify' : ([CEq__(n#(ts), n#(ts'), info) | cs], mgu) -> <unify'> (<conc> (cs, cs'), mgu)
        where <equal>(<length> ts, <length> ts');
              cs' := <zip; map(makeEq(|info))> (ts, ts')
    unify' = get-info; singelton; error; fail

    /**
     * Apply the given mgu to term `t'. The difference to `replace-all'
     * is, that the substitution is also applied to the mgu itself.
     *
     * @param t - term to which the mgu is applied
     */
    apply-mgu(|t) : [] -> t
    apply-mgu(|t) : [(x, s) | mgu] -> <apply-mgu(|t')> mgu'
        where t' := <replace(|x, s, t)>
        where mgu' := <map(replace(|x, s))> mgu