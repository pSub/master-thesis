module constraint-solving

imports constraint-language
imports utils
imports include/SLTC

rules
    // Occurs check
    occurs : (x, Var__(x)) -> <id>
    occurs : (x, name#([])) -> <fail>
    occurs : (x, name#(ts@[_|_])) -> <map(occurs)> ts

    // Robinson unification
    unify : ([], mgu) -> ([], mgu)
    unify : ([CEq__(t, t, info) | cs], mgu) -> <unify> (cs, mgu)
    unify : ([CNeq__(t, s, info)| cs], mgu) -> <unify> (cs, mgu)
        where <not(equal)> (t, s)
    unify : ([CEq__(t, Var__(x), info) | cs], mgu) ->
         <unify> (<conc> (cs, <singelton> CEq__(Var__(x), t, info)), mgu)
    unify : ([CEq__(v@Var__(x), t, info) | cs], mgu) -> <if <occurs> (x, t)
                                     then <error> [x, " occurs in", t]
                                     else <unify> (<replace(|cs)> (v, t), [(v, t)|mgu])
                                     end>
    unify : ([CEq__(n#(ts), n#(ts'), info) | cs], mgu) -> <unify> (<conc> (cs, cs'), mgu)
        where <equal>(<length> ts, <length> ts');
              cs' := <zip; map(makeEq(|info))> (ts, ts')
    unify = get-info; singelton; error
