module constraint-solving

imports constraint-language
imports utils
imports include/SLTC

rules

    /**
     * Occurs check. Succeeds if x is contained in t and
     * fails otherwise.
     *
     * @type (a, b) -> a
     */
    occurs : (x, t) -> <sometd(?x)> t

    /**
     * Robinson unification. For details see:
     *   ROBINSON, J.A. Computational logic: The unification computation.
     *   ROBINSON, J.A. A machine-oriented logicbased on the resolution principle
     *
     * @type List(Constraint) -> (List(Constraint), (Var, a))
     */
    unify : cs -> <unify'> (cs, [], [])
    unify-internal : cs -> <unify'; where(Third; equal(|[])) < Snd + fail> (cs, [], [])
    unify' : ([], mgu, err) -> ([], mgu, err)
    unify' : ([CFail(info) | cs], mgu, err) -> <unify'> (cs, mgu, [info | err])
    unify' : ([CEq__(t, t, info) | cs], mgu, err) -> <unify'> (cs, mgu, err)
    unify' : ([CNeq__(t, s, info)| cs], mgu, err) -> <unify'> (cs, mgu, err)
        where <not(equal)> (t, s)
    unify' : ([CEq__(t, Var__(x), info) | cs], mgu, err) ->
         <unify'> (<conc> (cs, <singelton> CEq__(Var__(x), t, info)), mgu, err)
    unify' : ([CEq__(v@Var__(x), t, info) | cs], mgu, err) -> <if <occurs> (v, t)
                                     then <unify'> (cs, mgu, [info | err])
                                     else <unify'> (<replace(|cs)> (v, t), [(v, t)|mgu], err)
                                     end>
    unify' : ([CEq__(n#(ts), n#(ts'), info) | cs], mgu, err) -> <unify'> (<conc> (cs, cs'), mgu, err)
        where <equal>(<length> ts, <length> ts');
              cs' := <zip; map(makeEq(|info))> (ts, ts')
    unify' : ([c | cs], mgu, err) -> <unify'> (cs, mgu, [<get-info> c | err])

    /**
     * Apply the given mgu to term `t'. The difference to `replace-all'
     * is, that the substitution is also applied to the mgu itself.
     *
     * @param t - term to which the mgu is applied
     * @type List(a, b) -> c
     */
    apply-mgu(|t) : [] -> t
    apply-mgu(|t) : [(x, s) | mgu] -> <apply-mgu(|t')> mgu'
        where t' := <replace(|x, s, t)>
        where mgu' := <map(replace(|x, s))> mgu