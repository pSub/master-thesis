/**
 * Defines the constructors of the constraint language
 * and provides auxiliary rules.
 */
module constraint-language

imports utils

signature
    sorts Constraint
    constructors
       Error__ : Option(term) -> Error
       Var__ : String -> Term
       CFail__ : Error -> Constraint
       CEq__ : term * term * error -> Constraint
       CNeq__ : term * term * error -> Constraint

rules

    /**
     * Helper rule to create Var__ nodes.
     *
     * @type a -> Var__(a)
     */
    makeVar : v -> Var__(v)
    makeVar = failed

    /**
     * Helper rule to creae CEq__ nodes.
     *
     * @param error - Error
     * @type (a, b) -> CEq__(a, b, Error)
     */
    makeCEq(|error) : (a, b) -> CEq__(a, b, error)
    makeCEq(|error) = failed(|[error])

    /**
     * Helper rule to creae CNeq__ nodes.
     *
     * @param error - Error
     * @type (a, b) -> CNeq__(a, b, Error)
     */
    makeCNeq(|error) : (a, b) -> CNeq__(a, b, error)
    makeCNeq(|error) = failed(|[error])

    /**
     * Retrieves the error of a constraint.
     *
     * @type Constraint -> Error
     */
    get-error = proj(CEq__|3) <+ proj(CNeq__|3) <+ proj(CFail__|1)
    get-error = failed
    
    /**
     * Replaces the error of a constraint with new error.
     *
     * @param error - Error
     * @type Constraint -> Constraint
     */
    put-error(|error) : CEq__(a, b, _) -> CEq__(a, b, error)
    put-error(|error) : CNeq__(a, b, _) -> CNeq__(a, b, error)
    put-error(|error) : CFail__(_) -> CFail__(error)
    put-error(|error) = failed(|[error])