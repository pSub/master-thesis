module tests-constraint-solving

imports constraint-solving
imports constraint-language

rules    
    occurs-tests = apply-test(!"occurs", occurs,
                              !(Var__("x"), Var__("x")),
                              !Var__("x"));
                   apply-test(!"occurs", occurs,
                              !(Var__("x"), CEq__(CEq__("int", Var__("x"), Some("test")), "int", Some("test"))),
                              !CEq__(CEq__("int", Var__("x"), Some("test")), "int", Some("test")));
                   apply-and-fail(!"occurs", occurs,
                                  !("x", CEq__("int", "int", Some("T-add"))));
                   apply-and-fail(!"occurs", occurs,
                                  !("x", CEq__(CEq__("int", "float", Some("test")), "int", Some("test"))))

    unify-tests = apply-test(!"unify", unify,
                             ![ CEq__("int", "int", Some("T-add")) ],
                             !([], []));
                  apply-test(!"unify", unify,
                             ! [ CEq__(Var__("Y295"), "int", Some("T-add"))
                               , CEq__("int", Var__("Y295"), Some("T-var"))
                               ],
                             ! ([], [(Var__("Y295"), "int")]));
                  apply-test(!"unify", unify,
                             ![ CEq__(Var__("x"), Var__("x"), Some("test")) ],
                             !([], []));
                  apply-test(!"unify", unify,
                             ![ CEq__([Var__("x"), "b"], ["a", Var__("y")], Some("test")) ],
                             !([], [(Var__("y"), "b"), (Var__("x"), "a")]));
                  apply-test(!"unify", unify,
                             ![ CNeq__("a", "b", Some("test"))],
                             !([], []));
                  apply-and-fail(!"unify", unify,
                                 ![ CNeq__("a", "a", Some("test")) ]);
                  apply-and-fail(!"unify", unify,
                                 ![ CEq__(Var__("x"), [Var__("x"), "a"], Some("test")) ])
                                 
    apply-mgu-tests = apply-test(!"apply-mgu", apply-mgu(|[]),
                                 ![("x", "a")],
                                 ![]);
                      apply-test(!"apply-mgu", apply-mgu(|"x"),
                                 ![("x", "a")],
                                 !"a");
                      apply-test(!"apply-mgu", apply-mgu(|"x"),
                                 ![("y" , "b"),("x", ["a", "y"])],
                                 !["a", "b"]);
                      apply-test(!"apply-mgu", apply-mgu(|["x", ["a", "x", "b"], "y"]),
                                 ![("x", [1,2,3]), (2, 42), ("y", "foo")],
                                 ![[1,42,3], ["a", [1,42,3], "b"], "foo"])

    tests-constraint-solving =
        occurs-tests; unify-tests; apply-mgu-tests