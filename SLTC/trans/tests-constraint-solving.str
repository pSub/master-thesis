module tests-constraint-solving

imports constraint-solving
imports constraint-language

rules    
    occurs-tests = apply-test(!"occurs", occurs,
                              !(Var__("x"), Var__("x")),
                              !Var__("x"));
                   apply-test(!"occurs", occurs,
                              !(Var__("x"), CEq__(CEq__("int", Var__("x"), Some("test")), "int", Some("test"))),
                              !CEq__(CEq__("int", Var__("x"), Some("test")), "int", Some("test")));
                   apply-and-fail(!"occurs", occurs,
                                  !("x", CEq__("int", "int", Some("T-add"))));
                   apply-and-fail(!"occurs", occurs,
                                  !("x", CEq__(CEq__("int", "float", Some("test")), "int", Some("test"))))

    unify-tests = apply-test(!"unify", unify,
                             ![ CEq__("int", "int", Some("T-add")) ],
                             !([], []));
                  apply-test(!"unify", unify,
                             ! [ CEq__(Var__("Y295"), "int", Some("T-add"))
                               , CEq__("int", Var__("Y295"), Some("T-var"))
                               ],
                             ! ([], [(Var__("Y295"), "int")]));
                  apply-test(!"unify", unify,
                             ![ CEq__(Var__("x"), Var__("x"), Some("test")) ],
                             !([], []));
                  apply-test(!"unify", unify,
                             ![ CEq__([Var__("x"), "b"], ["a", Var__("y")], Some("test")) ],
                             !([], [(Var__("y"), "b"), (Var__("x"), "a")]));
                  apply-test(!"unify", unify,
                             ![ CNeq__("a", "b", Some("test"))],
                             !([], []));
                  apply-and-fail(!"unify", unify,
                                 ![ CNeq__("a", "a", Some("test")) ]);
                  apply-and-fail(!"unify", unify,
                                 ![ CEq__(Var__("x"), [Var__("x"), "a"], Some("test")) ])

    subst-tests = apply-test(!"subst", subst,
                             !("x", "a", ["x", "b", "c"]),
                             !["a", "b", "c"]);
                  apply-test(!"subst", subst,
                             !("x", "a", []),
                             ![]);
                  apply-test(!"subst", subst,
                             !("x", "a", "x"),
                             !"a");
                  apply-test(!"subst", subst,
                             !("x", [1, 2, 3], ["x", ["a", "x", "b"], "y"]),
                             ![[1, 2, 3], ["a", [1, 2, 3], "b"], "y"])
    
    test-suite-constraint-solving = 
        test-suite(!"constraint-solving",
                   occurs-tests;
                   unify-tests;
                   subst-tests
                  )
