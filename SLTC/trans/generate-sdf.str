module generate-sdf

imports utils
imports include/SLTC
imports org/sugarj/languages/Sdf2

rules

    /**
     * Entry point for the generation of syntax definition file for
     * the given specification.
     */
    make-nodes : 
        Module(ModuleDec(_),
               imports,
               Language(t),
               Contexts(contexts),
               MetaVariables(meta-variables),
               Judgments(judgments),
               Rules(_),
               conjectures)
          -> 'module("Generated",
                     [imports(t), imports("Common")], 
                     exports(
                        conc-grammars(context-free-syntax(<map(make-variable(|indexed-contexts))> meta-variables),
                        conc-grammars(context-free-syntax(<map(make-context)> indexed-contexts),
                        context-free-syntax(<add-indices; map(make-judgment)> judgments)))
                     )
              )
        where indexed-contexts := <add-indices> contexts

    /**
     * Generate syntax of context definitons.
     */
    make-context : (num, ContextDefinition(Name, Definition)) -> [
        prod("\"()\"", Name, <make-cons'> ["ContextEmpty-", <int-to-string> num]),
        prod(<concat-strings> [elem, " \";\" ", Name], Name,
                               <make-cons'> ["ContextBind-", <int-to-string> num]),
        prod(<concat-strings> ["\"(\" ", Name, " \")\""], Name, <make-attr> "bracket"),
        prod(<concat-strings> [elem, " \"in\" ", Name], "TypingJudgment", 
                               <make-cons'> ["ContextLookup-", <int-to-string> num])
       ]
        where
            elem := <names; separate-by(|" \":\" "); concat-strings> Definition

    /**
     * Generate syntax of meta-variable definitions
     */ 
    make-variable(|indexed-contexts) : MetaVariableDefinition(name, MetaVariablePrefix(prefix), Scope(ids)) ->
        <mapconcat(\scope -> [ prod(<concat-strings>["\"", prefix, "\" MetaVariableName (\"@\" ErrorNumber)?"],
                                    scope,
                                    <make-cons'> ["MetaVariable-", <extract-ctx-id <+ !name> (scope, indexed-contexts)]),
                               prod(<concat-strings>["\"", prefix, "\" MetaVariableName (\"@\" ErrorNumber)?"],
                                    "MetaVariable",
                                    <make-cons'> ["MetaVariable-", <extract-ctx-id <+ !name> (scope, indexed-contexts)])
                             ]
                   \)> ids

    /**
     * Extracts the context id for the given meta-variable scope.
     *
     * @type (String, List((Int, ContextDefinition))) -> Int
     */
    extract-ctx-id : (name, [(n, ContextDefinition(name, _)) | _] ) -> <int-to-string> n
    extract-ctx-id : (name, [_ | contexts]) -> <extract-ctx-id> (name, contexts)

    /**
     * Generate syntax of typing judgments.
     */
    make-judgment : (num, Judgment(s1, pos, s2, built-in))
           -> prod(<names; separate-by(|" "); concat-strings> merged,
                   "TypingJudgment",
                   <maybe(\BuiltIn(s) -> <conc-strings> (s, "-", <int-to-string> num)\
                         | <conc-strings> (typing-judgment, <int-to-string> num));
                    make-cons> built-in)
            where
                merged := <conc> ([<option-to-string> s1], pos, [<option-to-string> s2]);
                typing-judgment := "TypingJudgment-"

    /**
     * Extract position 1 (the name) of the hole for all elements of the list.
     * All other elements are not touched.
     *
     * @type List(Hole) -> List(a)
     */
    names = map(try(proj(Hole|1)))

    /**
     * Create a constructor attribute.
     *
     * @type String -> String
     */
    make-cons : name -> <concat-strings; make-attr> ["cons(\"", name , "\")"]

    /**
     * Concatenate a given list of strings and create a constructor attribute
     * from the result.
     *
     * @type List(String) -> String
     */  
    make-cons' = concat-strings ; make-cons

    /**
     * Create an attribute from the given string.
     *
     * @type String -> String
     */
    make-attr : str  -> <concat-strings> ["{", str, "}"]

strategies
    toSdf = make-nodes