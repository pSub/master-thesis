module generate-sdf

imports libstratego-lib
imports utils
imports include/SLTC
imports org/sugarj/languages/Sdf2

rules
	R : Module(_,
               Language(t),
               MetaVariables(MetaVariableList(Meta)),
               Contexts(Ctx),
               Judgments(Judg),
               _,
               _)
		-> 'module("Generated", [imports(t), imports("Common")], 
			exports(
				conc-grammars(context-free-syntax(Meta),
				conc-grammars(context-free-syntax(Ctx),
				context-free-syntax(Judg)))
			)
		)
				
	R : ContextDefinition(Name, Definition) -> [
		prod("\"()\"", Name, <make-cons'>["ContextEmpty-", Name]),
		prod(<concat-strings> [elem, " \";\" ", Name], Name,
							   <make-cons'> ["ContextBind-", Name]),
		prod(<concat-strings> ["\"(\" ", Name, " \")\""], Name, <make-attr> "bracket"),
		prod(<concat-strings> [elem, " \"in\" ", Name], "TypingJudgment", 
							   <make-cons'> ["ContextLookup-", Name])
	]
		where
			elem := <names; intersperse(|" \":\" "); concat-strings> Definition
			
			
	R : MetaVariableDefinition(Name, MetaVariablePrefix(prefix), Scope(ids)) ->
		<map(\scope -> prod(<concat-strings>["\"", prefix, "\" MetaVariable"],
						    scope,
						    <make-cons'> ["MetaVariable-", scope])\)> ids
	
	//FIXME: Reduce code duplication		
	R : Judgment(s1, pos, s2, None()) -> prod(<concat-strings><intersperse(|" ")> <names> merged,
	                                  "TypingJudgment",
	                                  <newname; make-cons> "TypingJudgment-")
			where
				merged := <conc> ([<option-to-string> s1], pos, [<option-to-string> s2])
	R : Judgment(s1, pos, s2, Some(BuiltIn(s))) -> prod(<concat-strings><intersperse(|" ")> <names> merged,
	                                  "TypingJudgment",
	                                  <conc-strings; make-cons> ("TypingJudgment-", s))
			where
				merged := <conc> ([<option-to-string> s1], pos, [<option-to-string> s2])

	names : list -> <map(try(proj(Hole|1)))> list

	make-cons : name -> <concat-strings; make-attr> ["cons(\"", name , "\")"]
	make-cons' = concat-strings ; make-cons
	make-attr : str  -> <concat-strings> ["{", str, "}"]
	
strategies
	toSdf = innermost(R)