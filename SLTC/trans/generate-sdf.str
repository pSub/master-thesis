module generate-sdf

imports libstratego-lib
imports include/SLTC	
imports org/sugarj/languages/Sdf2

rules
	R : Module(_, Language(t), MetaVariables(MetaVariableList(Meta)), Contexts(Contexts(Ctx)), Judgments(JudgmentList(Judg)), _)
		-> 'module("Generated", imports(t), 
			exports(
				conc-grammars(context-free-syntax(Meta),
				conc-grammars(context-free-syntax(Ctx),
				context-free-syntax(Judg)))
			)
		)
		
	R : ContextDefinition(Name, X) -> [
		prod("\"()\"", Name, <cons><concat-strings> ["Empty-", Name] ),
		prod(<concat-strings> [elem, " \";\" ", Name], Name,  <cons> Name),
		prod(<concat-strings> ["\"(\" ", Name, " \")\""], Name, <attr> "bracket"),
		prod(<concat-strings> [elem, " \"in\" ", Name], "TypingJudgment" ,<cons><concat-strings> ["Check-", Name])

	]
		where
			elem := <concat-strings><intersperse(|" \":\" ")><names> X
			
	R : MetaVariableDefinition(Name, MetaVariablePrefix(prefix), Scope(ids)) ->
		<map(\scope -> prod(<concat-strings>["\"", prefix, "\" [a-zA-Z]+"], scope, <cons> "MetaVariable")\)> ids
				
	R : Judgment(s1, pos, s2) -> prod(<concat-strings><intersperse(|" ")> <names> merged, "TypingJudgment", <cons> "Judgment")
			where
				merged := <conc> ([<option-to-string> s1], pos, [<option-to-string> s2])

	proj : Hole(name, _) -> name
	names : list -> <map(proj <+ id)> list

	cons : name -> <attr><concat-strings> ["cons(\"", name , "\")"]
	attr : str  -> <concat-strings> ["{", str, "}"]
				
    intersperse (|s) : [] -> []
    intersperse (|s) : [x] -> [x]
    intersperse (|s) : [x|y] -> [x,s| <intersperse(|s)> y]

    option-to-string : Some(s) -> s
    option-to-string : None()  -> ""
	
strategies
	toSdf = innermost(R)