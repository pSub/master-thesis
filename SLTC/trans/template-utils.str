module template-utils

imports utils
imports include/SLTC

rules
    get-judgment-types(|judgment) = get-judgment-types(id | judgment)
        
    get-judgment-types(type | judgment) =
        index(|judgment);
        collect-om(\Hole(non-terminal, type) -> non-terminal\, conc)
    get-judgment-types(type | judgment) = failed(|[judgment])

    /**
     * Extracts the typing judgment.
     *
     * @type ErrorTypingJudgment -> TypingJudgment
     */
    get-typing-judgment = proj(ErrorTypingJudgment|1)
    get-typing-judgment = failed

    /**
     * Extracts the error message.
     *
     * @type ErrorTypingJudgment -> List(MessagePart)
     */
    get-error-message = proj(ErrorTypingJudgment|2)
    get-error-message = failed

    /**
     * Extacts all consituents from the given term that are marked
     * as inputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-inputs(|declarations) = filter-hole-positions(?(_, "I") | declarations)
    get-inputs(|declarations) = failed(|[declarations])

    /**
     * Extacts all consituents from the given term that are marked
     * as outputs in the declaration.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-outputs(|declarations) = filter-hole-positions(?(_, "O") | declarations)
    get-outputs(|declarations) = failed(|declarations)

    /**
     * Extracts all consituents from a given term that satisfy the given
     * condition `cond`.
     *
     * @param cond - an arbitrary strategy
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    filter-hole-positions(cond | declarations) : node -> consituents
        where
            args := <get-arguments> node;
            positions := <get-hole-positions(|declarations); filter(cond); map(Fst)> node;
            consituents := <map(\n -> <index(|n)> args\)> positions
    filter-hole-positions(cond | declarations) = failed(|[declarations])

    /**
     * Fetches the declaration for the given node and provides a list of
     * holes together with their positions.
     *
     * @param declarations - either a list of context of judgment declarations
     *                       or something of equivalent structure
     */
    get-hole-positions(|declarations) : node -> <add-indices> holes
        where
            declaration-number := <get-judgment-id> node;
            declaration := <index(|declaration-number)> declarations;
            holes := <collect-all(?Hole(_,_), conc); map(proj(Hole|2))> declaration
    get-hole-positions(|declarations) = failed(|[declarations])